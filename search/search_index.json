{"config":{"lang":["en","ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to David's Blog","text":"<p><code>\u5c11\u5e74\u8f9b\u82e6\u771f\u98df\u84fc\uff0c\u8001\u5883\u6e05\u95f2\u5982\u5556\u8517\u3002</code></p>"},{"location":"#build-with-mkdocs","title":"Build With mkdocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Blog/Artificial%20Intelligence/","title":"Artificial Intelligence \u2014 The Revolution Hasn\u2019t Happened Yet","text":"<p>Michael Jordan</p> <p>Michael I. Jordan is a Professor in the Department of Electrical Engineering and Computer Sciences and the Department of Statistics at UC Berkeley.</p> <p>Apr 19, 2018</p> <p>Artificial Intelligence (AI) is the mantra of the current era. The phrase is intoned by technologists, academicians, journalists and venture capitalists alike. As with many phrases that cross over from technical academic fields into general circulation, there is significant misunderstanding accompanying the use of the phrase. But this is not the classical case of the public not understanding the scientists \u2014 here the scientists are often as befuddled as the public. The idea that our era is somehow seeing the emergence of an intelligence in silicon that rivals our own entertains all of us \u2014 enthralling us and frightening us in equal measure. And, unfortunately, it distracts us.</p> <p>There is a different narrative that one can tell about the current era. Consider the following story, which involves humans, computers, data and life-or-death decisions, but where the focus is something other than intelligence-in-silicon fantasies. When my spouse was pregnant 14 years ago, we had an ultrasound. There was a geneticist in the room, and she pointed out some white spots around the heart of the fetus. \u201cThose are markers for Down syndrome,\u201d she noted, \u201cand your risk has now gone up to 1 in 20.\u201d She further let us know that we could learn whether the fetus in fact had the genetic modification underlying Down syndrome via an amniocentesis. But amniocentesis was risky \u2014 the risk of killing the fetus during the procedure was roughly 1 in 300. Being a statistician, I determined to find out where these numbers were coming from. To cut a long story short, I discovered that a statistical analysis had been done a decade previously in the UK, where these white spots, which reflect calcium buildup, were indeed established as a predictor of Down syndrome. But I also noticed that the imaging machine used in our test had a few hundred more pixels per square inch than the machine used in the UK study. I went back to tell the geneticist that I believed that the white spots were likely false positives \u2014 that they were literally \u201cwhite noise.\u201d She said \u201cAh, that explains why we started seeing an uptick in Down syndrome diagnoses a few years ago; it\u2019s when the new machine arrived.\u201d</p> <p>We didn\u2019t do the amniocentesis, and a healthy girl was born a few months later. But the episode troubled me, particularly after a back-of-the-envelope calculation convinced me that many thousands of people had gotten that diagnosis that same day worldwide, that many of them had opted for amniocentesis, and that a number of babies had died needlessly. And this happened day after day until it somehow got fixed. The problem that this episode revealed wasn\u2019t about my individual medical care; it was about a medical system that measured variables and outcomes in various places and times, conducted statistical analyses, and made use of the results in other places and times. The problem had to do not just with data analysis per se, but with what database researchers call \u201cprovenance\u201d \u2014 broadly, where did data arise, what inferences were drawn from the data, and how relevant are those inferences to the present situation? While a trained human might be able to work all of this out on a case-by-case basis, the issue was that of designing a planetary-scale medical system that could do this without the need for such detailed human oversight.</p> <p>I\u2019m also a computer scientist, and it occurred to me that the principles needed to build planetary-scale inference-and-decision-making systems of this kind, blending computer science with statistics, and taking into account human utilities, were nowhere to be found in my education. And it occurred to me that the development of such principles \u2014 which will be needed not only in the medical domain but also in domains such as commerce, transportation and education \u2014 were at least as important as those of building AI systems that can dazzle us with their game-playing or sensorimotor skills.</p> <p>Whether or not we come to understand \u201cintelligence\u201d any time soon, we do have a major challenge on our hands in bringing together computers and humans in ways that enhance human life. While this challenge is viewed by some as subservient to the creation of \u201cartificial intelligence,\u201d it can also be viewed more prosaically \u2014 but with no less reverence \u2014 as the creation of a new branch of engineering. Much like civil engineering and chemical engineering in decades past, this new discipline aims to corral the power of a few key ideas, bringing new resources and capabilities to people, and doing so safely. Whereas civil engineering and chemical engineering were built on physics and chemistry, this new engineering discipline will be built on ideas that the preceding century gave substance to \u2014 ideas such as \u201cinformation,\u201d \u201calgorithm,\u201d \u201cdata,\u201d \u201cuncertainty,\u201d \u201ccomputing,\u201d \u201cinference,\u201d and \u201coptimization.\u201d Moreover, since much of the focus of the new discipline will be on data from and about humans, its development will require perspectives from the social sciences and humanities.</p> <p>While the building blocks have begun to emerge, the principles for putting these blocks together have not yet emerged, and so the blocks are currently being put together in ad-hoc ways.</p> <p>Thus, just as humans built buildings and bridges before there was civil engineering, humans are proceeding with the building of societal-scale, inference-and-decision-making systems that involve machines, humans and the environment. Just as early buildings and bridges sometimes fell to the ground \u2014 in unforeseen ways and with tragic consequences \u2014 many of our early societal-scale inference-and-decision-making systems are already exposing serious conceptual flaws.</p> <p>And, unfortunately, we are not very good at anticipating what the next emerging serious flaw will be. What we\u2019re missing is an engineering discipline with its principles of analysis and design.</p> <p>The current public dialog about these issues too often uses \u201cAI\u201d as an intellectual wildcard, one that makes it difficult to reason about the scope and consequences of emerging technology. Let us begin by considering more carefully what \u201cAI\u201d has been used to refer to, both recently and historically.</p> <p>Most of what is being called \u201cAI\u201d today, particularly in the public sphere, is what has been called \u201cMachine Learning\u201d (ML) for the past several decades. ML is an algorithmic field that blends ideas from statistics, computer science and many other disciplines (see below) to design algorithms that process data, make predictions and help make decisions. In terms of impact on the real world, ML is the real thing, and not just recently. Indeed, that ML would grow into massive industrial relevance was already clear in the early 1990s, and by the turn of the century forward-looking companies such as Amazon were already using ML throughout their business, solving mission-critical back-end problems in fraud detection and supply-chain prediction, and building innovative consumer-facing services such as recommendation systems. As datasets and computing resources grew rapidly over the ensuing two decades, it became clear that ML would soon power not only Amazon but essentially any company in which decisions could be tied to large-scale data. New business models would emerge. The phrase \u201cData Science\u201d began to be used to refer to this phenomenon, reflecting the need of ML algorithms experts to partner with database and distributed-systems experts to build scalable, robust ML systems, and reflecting the larger social and environmental scope of the resulting systems.</p> <p>This confluence of ideas and technology trends has been rebranded as \u201cAI\u201d over the past few years. This rebranding is worthy of some scrutiny.</p> <p>Historically, the phrase \u201cAI\u201d was coined in the late 1950\u2019s to refer to the heady aspiration of realizing in software and hardware an entity possessing human-level intelligence. We will use the phrase \u201chuman-imitative AI\u201d to refer to this aspiration, emphasizing the notion that the artificially intelligent entity should seem to be one of us, if not physically at least mentally (whatever that might mean). This was largely an academic enterprise. While related academic fields such as operations research, statistics, pattern recognition, information theory and control theory already existed, and were often inspired by human intelligence (and animal intelligence), these fields were arguably focused on \u201clow-level\u201d signals and decisions. The ability of, say, a squirrel to perceive the three-dimensional structure of the forest it lives in, and to leap among its branches, was inspirational to these fields. \u201cAI\u201d was meant to focus on something different \u2014 the \u201chigh-level\u201d or \u201ccognitive\u201d capability of humans to \u201creason\u201d and to \u201cthink.\u201d Sixty years later, however, high-level reasoning and thought remain elusive. The developments which are now being called \u201cAI\u201d arose mostly in the engineering fields associated with low-level pattern recognition and movement control, and in the field of statistics \u2014 the discipline focused on finding patterns in data and on making well-founded predictions, tests of hypotheses and decisions.</p> <p>Indeed, the famous \u201cbackpropagation\u201d algorithm that was rediscovered by David Rumelhart in the early 1980s, and which is now viewed as being at the core of the so-called \u201cAI revolution,\u201d first arose in the field of control theory in the 1950s and 1960s. One of its early applications was to optimize the thrusts of the Apollo spaceships as they headed towards the moon.</p> <p>Since the 1960s much progress has been made, but it has arguably not come about from the pursuit of human-imitative AI. Rather, as in the case of the Apollo spaceships, these ideas have often been hidden behind the scenes, and have been the handiwork of researchers focused on specific engineering challenges. Although not visible to the general public, research and systems-building in areas such as document retrieval, text classification, fraud detection, recommendation systems, personalized search, social network analysis, planning, diagnostics and A/B testing have been a major success \u2014 these are the advances that have powered companies such as Google, Netflix, Facebook and Amazon.</p> <p>One could simply agree to refer to all of this as \u201cAI,\u201d and indeed that is what appears to have happened. Such labeling may come as a surprise to optimization or statistics researchers, who wake up to find themselves suddenly referred to as \u201cAI researchers.\u201d But labeling of researchers aside, the bigger problem is that the use of this single, ill-defined acronym prevents a clear understanding of the range of intellectual and commercial issues at play.</p> <p>The past two decades have seen major progress \u2014 in industry and academia \u2014 in a complementary aspiration to human-imitative AI that is often referred to as \u201cIntelligence Augmentation\u201d (IA). Here computation and data are used to create services that augment human intelligence and creativity. A search engine can be viewed as an example of IA (it augments human memory and factual knowledge), as can natural language translation (it augments the ability of a human to communicate). Computing-based generation of sounds and images serves as a palette and creativity enhancer for artists. While services of this kind could conceivably involve high-level reasoning and thought, currently they don\u2019t \u2014 they mostly perform various kinds of string-matching and numerical operations that capture patterns that humans can make use of.</p> <p>Hoping that the reader will tolerate one last acronym, let us conceive broadly of a discipline of \u201cIntelligent Infrastructure\u201d (II), whereby a web of computation, data and physical entities exists that makes human environments more supportive, interesting and safe. Such infrastructure is beginning to make its appearance in domains such as transportation, medicine, commerce and finance, with vast implications for individual humans and societies. This emergence sometimes arises in conversations about an \u201cInternet of Things,\u201d but that effort generally refers to the mere problem of getting \u201cthings\u201d onto the Internet \u2014 not to the far grander set of challenges associated with these \u201cthings\u201d capable of analyzing those data streams to discover facts about the world, and interacting with humans and other \u201cthings\u201d at a far higher level of abstraction than mere bits.</p> <p>For example, returning to my personal anecdote, we might imagine living our lives in a \u201csocietal-scale medical system\u201d that sets up data flows, and data-analysis flows, between doctors and devices positioned in and around human bodies, thereby able to aid human intelligence in making diagnoses and providing care. The system would incorporate information from cells in the body, DNA, blood tests, environment, population genetics and the vast scientific literature on drugs and treatments. It would not just focus on a single patient and a doctor, but on relationships among all humans \u2014 just as current medical testing allows experiments done on one set of humans (or animals) to be brought to bear in the care of other humans. It would help maintain notions of relevance, provenance and reliability, in the way that the current banking system focuses on such challenges in the domain of finance and payment. And, while one can foresee many problems arising in such a system \u2014 involving privacy issues, liability issues, security issues, etc \u2014 these problems should properly be viewed as challenges, not show-stoppers.</p> <p>We now come to a critical issue: Is working on classical human-imitative AI the best or only way to focus on these larger challenges? Some of the most heralded recent success stories of ML have in fact been in areas associated with human-imitative AI \u2014 areas such as computer vision, speech recognition, game-playing and robotics. So perhaps we should simply await further progress in domains such as these. There are two points to make here. First, although one would not know it from reading the newspapers, success in human-imitative AI has in fact been limited \u2014 we are very far from realizing human-imitative AI aspirations. Unfortunately the thrill (and fear) of making even limited progress on human-imitative AI gives rise to levels of over-exuberance and media attention that is not present in other areas of engineering.</p> <p>Second, and more importantly, success in these domains is neither sufficient nor necessary to solve important IA and II problems. On the sufficiency side, consider self-driving cars. For such technology to be realized, a range of engineering problems will need to be solved that may have little relationship to human competencies (or human lack-of-competencies). The overall transportation system (an II system) will likely more closely resemble the current air-traffic control system than the current collection of loosely-coupled, forward-facing, inattentive human drivers. It will be vastly more complex than the current air-traffic control system, specifically in its use of massive amounts of data and adaptive statistical modeling to inform fine-grained decisions. It is those challenges that need to be in the forefront, and in such an effort a focus on human-imitative AI may be a distraction.</p> <p>As for the necessity argument, it is sometimes argued that the human-imitative AI aspiration subsumes IA and II aspirations, because a human-imitative AI system would not only be able to solve the classical problems of AI (as embodied, e.g., in the Turing test), but it would also be our best bet for solving IA and II problems. Such an argument has little historical precedent. Did civil engineering develop by envisaging the creation of an artificial carpenter or bricklayer? Should chemical engineering have been framed in terms of creating an artificial chemist? Even more polemically: if our goal was to build chemical factories, should we have first created an artificial chemist who would have then worked out how to build a chemical factory?</p> <p>A related argument is that human intelligence is the only kind of intelligence that we know, and that we should aim to mimic it as a first step. But humans are in fact not very good at some kinds of reasoning \u2014 we have our lapses, biases and limitations. Moreover, critically, we did not evolve to perform the kinds of large-scale decision-making that modern II systems must face, nor to cope with the kinds of uncertainty that arise in II contexts. One could argue that an AI system would not only imitate human intelligence, but also \u201ccorrect\u201d it, and would also scale to arbitrarily large problems. But we are now in the realm of science fiction \u2014 such speculative arguments, while entertaining in the setting of fiction, should not be our principal strategy going forward in the face of the critical IA and II problems that are beginning to emerge. We need to solve IA and II problems on their own merits, not as a mere corollary to a human-imitative AI agenda.</p> <p>It is not hard to pinpoint algorithmic and infrastructure challenges in II systems that are not central themes in human-imitative AI research. II systems require the ability to manage distributed repositories of knowledge that are rapidly changing and are likely to be globally incoherent. Such systems must cope with cloud-edge interactions in making timely, distributed decisions and they must deal with long-tail phenomena whereby there is lots of data on some individuals and little data on most individuals. They must address the difficulties of sharing data across administrative and competitive boundaries. Finally, and of particular importance, II systems must bring economic ideas such as incentives and pricing into the realm of the statistical and computational infrastructures that link humans to each other and to valued goods. Such II systems can be viewed as not merely providing a service, but as creating markets. There are domains such as music, literature and journalism that are crying out for the emergence of such markets, where data analysis links producers and consumers. And this must all be done within the context of evolving societal, ethical and legal norms.</p> <p>Of course, classical human-imitative AI problems remain of great interest as well. However, the current focus on doing AI research via the gathering of data, the deployment of \u201cdeep learning\u201d infrastructure, and the demonstration of systems that mimic certain narrowly-defined human skills \u2014 with little in the way of emerging explanatory principles \u2014 tends to deflect attention from major open problems in classical AI. These problems include the need to bring meaning and reasoning into systems that perform natural language processing, the need to infer and represent causality, the need to develop computationally-tractable representations of uncertainty and the need to develop systems that formulate and pursue long-term goals. These are classical goals in human-imitative AI, but in the current hubbub over the \u201cAI revolution,\u201d it is easy to forget that they are not yet solved.</p> <p>IA will also remain quite essential, because for the foreseeable future, computers will not be able to match humans in their ability to reason abstractly about real-world situations. We will need well-thought-out interactions of humans and computers to solve our most pressing problems. And we will want computers to trigger new levels of human creativity, not replace human creativity (whatever that might mean).</p> <p>It was John McCarthy (while a professor at Dartmouth, and soon to take a position at MIT) who coined the term \u201cAI,\u201d apparently to distinguish his budding research agenda from that of Norbert Wiener (then an older professor at MIT). Wiener had coined \u201ccybernetics\u201d to refer to his own vision of intelligent systems \u2014 a vision that was closely tied to operations research, statistics, pattern recognition, information theory and control theory. McCarthy, on the other hand, emphasized the ties to logic. In an interesting reversal, it is Wiener\u2019s intellectual agenda that has come to dominate in the current era, under the banner of McCarthy\u2019s terminology. (This state of affairs is surely, however, only temporary; the pendulum swings more in AI than in most fields.)</p> <p>But we need to move beyond the particular historical perspectives of McCarthy and Wiener.</p> <p>We need to realize that the current public dialog on AI \u2014 which focuses on a narrow subset of industry and a narrow subset of academia \u2014 risks blinding us to the challenges and opportunities that are presented by the full scope of AI, IA and II.</p> <p>This scope is less about the realization of science-fiction dreams or nightmares of super-human machines, and more about the need for humans to understand and shape technology as it becomes ever more present and influential in their daily lives. Moreover, in this understanding and shaping there is a need for a diverse set of voices from all walks of life, not merely a dialog among the technologically attuned. Focusing narrowly on human-imitative AI prevents an appropriately wide range of voices from being heard.</p> <p>While industry will continue to drive many developments, academia will also continue to play an essential role, not only in providing some of the most innovative technical ideas, but also in bringing researchers from the computational and statistical disciplines together with researchers from other disciplines whose contributions and perspectives are sorely needed \u2014 notably the social sciences, the cognitive sciences and the humanities.</p> <p>On the other hand, while the humanities and the sciences are essential as we go forward, we should also not pretend that we are talking about something other than an engineering effort of unprecedented scale and scope \u2014 society is aiming to build new kinds of artifacts. These artifacts should be built to work as claimed. We do not want to build systems that help us with medical treatments, transportation options and commercial opportunities to find out after the fact that these systems don\u2019t really work \u2014 that they make errors that take their toll in terms of human lives and happiness. In this regard, as I have emphasized, there is an engineering discipline yet to emerge for the data-focused and learning-focused fields. As exciting as these latter fields appear to be, they cannot yet be viewed as constituting an engineering discipline.</p> <p>Moreover, we should embrace the fact that what we are witnessing is the creation of a new branch of engineering. The term \u201cengineering\u201d is often invoked in a narrow sense \u2014 in academia and beyond \u2014 with overtones of cold, affectless machinery, and negative connotations of loss of control by humans. But an engineering discipline can be what we want it to be.</p> <p>In the current era, we have a real opportunity to conceive of something historically new \u2014 a human-centric engineering discipline.</p> <p>I will resist giving this emerging discipline a name, but if the acronym \u201cAI\u201d continues to be used as placeholder nomenclature going forward, let\u2019s be aware of the very real limitations of this placeholder. Let\u2019s broaden our scope, tone down the hype and recognize the serious challenges ahead.</p> <p>Michael I. Jordan</p> <p>Acknowledgments: There are a number of individuals whose comments during the writing of this article have helped me greatly, including Jeff Bezos, Dave Blei, Rod Brooks, Cathryn Carson, Tom Dietterich, Charles Elkan, Oren Etzioni, David Heckerman, Douglas Hofstadter, Michael Kearns, Tammy Kolda, Ed Lazowska, John Markoff, Esther Rolf, Maja Mataric, Dimitris Papailiopoulos, Ben Recht, Theodoros Rekatsinas, Barbara Rosario and Ion Stoica. And I would like to add a special thanks to Cameron Baradar at The House, who first encouraged me to contemplate writing such a piece.</p> <p>Bio: Michael I. Jordan is Professor of Computer Science and Statistics at the University of California, Berkeley. He has worked for over three decades in the computational, inferential, cognitive and biological sciences, first as a graduate student at UCSD and then as a faculty member at MIT and Berkeley. One of his recent roles is as a Faculty Partner and Co-Founder at AI@The House \u2014 a venture fund and accelerator in Berkeley. This fund aims to support not only AI activities, but also IA and II activities, and to do so in the context of a university environment that includes not only the engineering disciplines, but also the perspectives of the social sciences, the cognitive sciences and the humanities.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/","title":"How to Write Software With Mathematical Perfection","text":"<p>Leslie Lamport revolutionized how computers talk to each other. Now he\u2019s working on how engineers talk to their machines.</p> <p>Leslie Lamport may not be a household name, but he\u2019s behind a few of them for computer scientists: the typesetting program LaTeX and the work that made cloud infrastructure at Google and Amazon possible. He\u2019s also brought more attention to a handful of problems, giving them distinctive names like the bakery algorithm and the Byzantine Generals Problem. This is no accident. The 81-year-old computer scientist is unusually thoughtful about how people use and think about software.</p> <p>In 2013, he won the A.M. Turing Award, considered the Nobel Prize of computing, for his work on distributed systems, where multiple components on different networks coordinate to achieve a common objective. Internet searches, cloud computing and artificial intelligence all involve orchestrating legions of powerful computing machines to work together. Of course, this kind of coordination opens you up to more problems.</p> <p>\u201cA distributed system is one in which the failure of a computer you didn\u2019t even know existed can render your own computer unusable,\u201d Lamport once said.</p> <p>Among the biggest sources of problems are \u201cconcurrent systems,\u201d where multiple computing operations happen during overlapping slices of time, leading to ambiguity: Which computer\u2019s clock is the right one? In a seminal 1978 paper, Lamport introduced the notion of \u201ccausality\u201d to solve this issue, using an insight from special relativity. Two observers may disagree on the order of events, but if one event causes another, that eliminates the ambiguity. And sending or receiving a message can establish causality among multiple processes. Logical clocks \u2014 now also called Lamport clocks \u2014 provided a standard way to reason about concurrent systems.</p> <p>With this tool in hand, computer scientists next wondered how they could systematically make these connected computers even bigger, without adding bugs. Lamport came up with an elegant solution: Paxos, a \u201cconsensus algorithm\u201d that allows multiple computers to execute complex tasks. Without Paxos and its family of algorithms, modern computing could not exist.</p> <p>In the early 1980s, as he developed the field, Lamport also created LaTeX, a document preparation system that provides sophisticated ways to typeset complex formulas and format scientific documents. LaTeX has become the standard for formatting papers not only in math and computer science but also in most scientific domains.</p> <p>Lamport\u2019s work since the 1990s has focused on \u201cformal verification,\u201d the use of mathematical proofs to verify the correctness of software and hardware systems. Notably, he created a \u201cspecification language\u201d called TLA+ (for Temporal Logic of Actions). A software specification is like a blueprint or a recipe for a program; it describes how software should behave on a high level. It\u2019s not always necessary, since coding a simple program is akin to just boiling an egg. But a more complicated task with higher stakes \u2014 the coding equivalent of a nine-course banquet \u2014 requires more precision. You need to prepare each component of each dish, combine them in a precise way, then serve them to every guest in the correct order. This requires exact recipes and instructions, written in unambiguous and succinct language, but descriptions written in English prose could leave room for misinterpretation. TLA+ employs the precise language of mathematics to prevent bugs and avoid design flaws.</p> <p>Using your recipe, or specification, as an input, a program called a model checker will check whether the recipe makes sense and works as intended, producing a dish the way the chef wants it. Lamport laments how programmers often cobble together a system before writing a proper specification, whereas chefs would never cater a banquet without first knowing that their recipes will work.</p> <p>Quanta spoke with Lamport about his work on distributed systems, what\u2019s wrong with computer science education, and how using TLA+ can help programmers build better systems. The interview has been condensed and edited for clarity.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#lets-start-with-paxos-since-its-such-an-influential-algorithm-what-made-you-start-working-on-it-in-the-first-place","title":"Let\u2019s start with Paxos, since it\u2019s such an influential algorithm. What made you start working on it in the first place?","text":"<p>People were building a system with some code, and I had the hunch that what their code was trying to accomplish was impossible. So I decided to try to prove it, and instead came up with an algorithm that the people should have been using for their system.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#what-was-wrong-with-their-original-algorithm","title":"What was wrong with their original algorithm?","text":"<p>Well, they didn\u2019t have an algorithm, just a bunch of code. Very few programmers think in terms of algorithms. When trying to write a concurrent system, if you just code it without having algorithms, there\u2019s no way that your program is not going to be full of bugs.</p> <p>The paper that introduced Paxos wasn\u2019t very widely read at first. Why was that?</p> <p>What made it impossible for people to read the paper was that I like explaining things with stories, and I made up names for characters in sort of pseudo-Greek letters. For example, in the paper there was a cheese inspector named \u0393\u03c9\u03c5\u03b4\u03b1. Having grown up as a mathematician, where Greek letters were used all over the place, I was just unaware that nonmathematicians get completely freaked out by those letters. Apparently, the readers couldn\u2019t deal with it, and it caused that paper not to be read as it should have been.</p> <p>So that didn\u2019t work as well at first. Although in the long run it did, because people call this family of consensus algorithms Paxos instead of \u201cviewstamped replication,\u201d which was another name for the same algorithm from [the computer scientist] Barbara Liskov.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#after-working-on-distributed-systems-for-so-many-years-what-got-you-into-tla","title":"After working on distributed systems for so many years, what got you into TLA+?","text":"<p>In the 1970s, when people were reasoning about programs, they were proving properties of the program itself stated in terms of programming languages. Then people realized that they should really be stating what the program is supposed to accomplish first \u2014 the program\u2019s behaviors.</p> <p>In the early 1980s, I realized that one practical method of writing these higher-level specifications for concurrent systems was writing them as abstract algorithms. With TLA+, I was able to express them mathematically in a completely rigorous fashion. And everything clicked. What that involves is basically not trying to write algorithms in a programming language: If you really want to do things right, you need to write your algorithm in the terms of mathematics.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#youve-said-if-youre-thinking-without-writing-you-only-think-youre-thinking-is-that-where-model-checking-comes-in","title":"You\u2019ve said, \u201cIf you\u2019re thinking without writing, you only think you\u2019re thinking.\u201d Is that where model checking comes in?","text":"<p>Model checking is a method for exhaustively testing all executions of a small model of the system. It just shows the correctness of the model, not of the algorithm. While model checking tests for correctness, coding just produces code. It doesn\u2019t test anything. Before there was model checking, the only way to be sure that your algorithm worked was to write a proof.</p> <p>In practice, model checking checks all executions of a small instance of the algorithm. And if you\u2019re lucky, you can check large enough instances that it gives you enough confidence in the algorithm. But the proof can prove its correctness for a system of any size and for any use of the algorithm.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#it-sounds-like-model-checking-is-related-to-another-method-of-program-verification-interactive-theorem-proving-using-tools-such-as-coq-how-are-they-different","title":"It sounds like model checking is related to another method of program verification: interactive theorem proving using tools such as Coq. How are they different?","text":"<p>Coq was designed to do real mathematics and to be able to capture the reasoning that mathematicians do. It\u2019s what Georges Gonthier used to prove the four-color theorem, for example. A machine-checked proof of a mathematical statement shows that the statement is almost certainly true.</p> <p>TLA+ is designed not for mathematicians but for engineers who want to prove the properties of their systems. In the 1990s, after having spent about 15 years writing proofs of concurrent algorithms, I learned what you needed to do in order to prove the correctness of a concurrent algorithm. TLA was the logic that allowed it to be all completely formal. And TLA+ is the complete language based on that.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#specification-languages-like-tla-arent-used-very-widely-in-industry-right-why-do-you-think-that-is","title":"Specification languages like TLA+ aren\u2019t used very widely in industry, right? Why do you think that is?","text":"<p>Well, I\u2019m doing what I can. But basically, programmers and many (if not most) computer scientists are terrified by math. So that\u2019s a tough sell.</p> <p>Secondly, every project has to be done in a rush. There\u2019s an old saying, \u201cThere\u2019s never time to do it right. There\u2019s always time to do it over.\u201d Because TLA+ involves upfront effort, you\u2019re adding a new step in the development process, and that\u2019s also a hard sell.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#is-it-always-worth-that-upfront-effort","title":"Is it always worth that upfront effort?","text":"<p>True, most of the code written by programmers across the world doesn\u2019t require very precise statements about what it\u2019s supposed to do. But there are things that are important and need to be correct.</p> <p>When people build a chip, they want that chip to work right. When people build a cloud infrastructure, they don\u2019t want bugs that will lose people\u2019s data. For the kind of application where precision is important, you need to be very rigorous. And you need something like TLA+, especially if there\u2019s concurrency involved, which there usually is in these systems.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#are-programmers-biased-in-terms-of-spending-more-time-writing-code-than-they-do-thinking-about-it","title":"Are programmers biased in terms of spending more time writing code than they do thinking about it?","text":"<p>Yes, the importance of thinking and writing before you code needs to be taught in undergraduate computer science courses and it\u2019s not. And the reason is that there\u2019s no communication between the people who teach programming and the people who teach program verification.</p> <p>From what I\u2019ve seen, the fault lies on both sides of that divide. The people who teach programming don\u2019t know the verification that they need to know. The people who are teaching verification don\u2019t understand how it should be applied and used in practice.</p> <p>Until that divide is bridged, TLA+ is not going to find a large number of users. I hope I could at least get the people who teach concurrent programming to understand that they need it. Then maybe there\u2019s some hope.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#i-get-the-sense-that-you-arent-too-happy-with-computer-science-education-these-days-is-it-because-it-doesnt-put-enough-emphasis-on-mathematics","title":"I get the sense that you aren\u2019t too happy with computer science education these days. Is it because it doesn\u2019t put enough emphasis on mathematics?","text":"<p>On mathematical thinking, yeah.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#how-would-you-structure-an-undergraduate-curriculum-then","title":"How would you structure an undergraduate curriculum, then?","text":"<p>I\u2019m not an educator, so I don\u2019t know how to teach it to them. But I know what people should have learned. They shouldn\u2019t be afraid of math. It\u2019s just simple math that they\u2019ve probably taken a course in, but they don\u2019t know how to use it. They don\u2019t know what good it is. They learn enough to pass the exam and then they forget about it.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#mathematicians-often-say-they-see-beauty-in-math-you-started-out-in-that-field-so-do-you-see-beauty-in-algorithms","title":"Mathematicians often say they see beauty in math. You started out in that field, so do you see beauty in algorithms?","text":"<p>I don\u2019t think in terms of aesthetics. I probably have the kinds of feelings that other people do, but I just use different words to express them. Being beautiful is not something I would say about an algorithm. But simplicity is something that I value highly.</p>"},{"location":"Blog/How%20to%20Write%20Software%20With%20Mathematical%20Perfection/#one-last-thing-about-another-side-project-of-yours-with-a-sizable-impact-latex-id-like-to-finally-clear-something-up-with-the-creator-is-it-pronounced-lah-tekh-or-lay-tekh","title":"One last thing, about another side project of yours with a sizable impact: LaTeX. I\u2019d like to finally clear something up with the creator. Is it pronounced LAH-tekh or LAY-tekh?","text":"<p>Any way you want. I don\u2019t advise spending very much time thinking about it.</p>"},{"location":"Blog/Learn%20In%20Public/","title":"Learn In Public","text":"<p>The fastest way to learn</p> <p>If there\u2019s a golden rule, it\u2019s this one, so I put it first. All the other rules are more or less elaborations of this rule #1.</p> <p>You already know that you will never be done learning. But most people \u201clearn in private\u201d, and lurk. They consume content without creating any themselves. Again, that\u2019s fine, but we\u2019re here to talk about being in the top quintile. What you do here is to have a habit of creating learning exhaust:</p> <ul> <li>Write blogs and tutorials and cheatsheets.</li> <li>Speak at meetups and conferences.</li> <li>Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they\u2019re not public.</li> <li>Make Youtube videos or Twitch streams.</li> <li>Start a newsletter.</li> <li>Draw cartoons (people loooove cartoons!).</li> </ul> <p>Whatever your thing is, make the thing you wish you had found when you were learning. Don\u2019t judge your results by \u201cclaps\u201d or retweets or stars or upvotes - just talk to yourself from 3 months ago. I keep an almost-daily dev blog written for no one else but me.</p> <p>Guess what? It\u2019s not about reaching as many people as possible with your content. If you can do that, great, remember me when you\u2019re famous. But chances are that by far the biggest beneficiary of you trying to help past you is future you. If others benefit, that\u2019s icing.</p> <p>Oh you think you\u2019re done? Don\u2019t stop there:</p> <ul> <li>Enjoyed a coding video? Reach out to the speaker/instructor and thank them, and ask questions.</li> <li>Make PR\u2019s to libraries you use.</li> <li>Make your own libraries no one will ever use.</li> <li>Clone stuff you like, from scratch, to see how they work.</li> <li>Teach workshops.</li> <li>Go to conferences and summarize what you learned.</li> </ul> <p>If you\u2019re tired of creating one-off things, start building a persistent knowledge base that grows over time. Open Source your Knowledge! At every step of the way: Document what you did and the problems you solved.</p> <p>The subheading under this rule would be: Try your best to be right, but don\u2019t worry when you\u2019re wrong. Repeatedly. If you feel uncomfortable, or like an impostor, good. You\u2019re pushing yourself. Don\u2019t assume you know everything, but try your best anyway, and let the internet correct you when you are inevitably wrong. Wear your noobyness on your sleeve.</p> <p>People think you suck? Good. You agree. Ask them to explain, in detail, why you suck. You want to just feel good or you want to be good? No objections, no hurt feelings. Then go away and prove them wrong. Of course, if they get abusive block them.</p> <p>Did I mention that teaching is the best way to learn? Talk while you code. It can be stressful and I haven\u2019t done it all that much but my best technical interviews have been where I ended up talking like I teach instead of desperately trying to prove myself. We\u2019re animals, we\u2019re attracted to confidence and can smell desperation.</p> <p>At some point you\u2019ll get some support behind you. People notice genuine learners. They\u2019ll want to help you. Don\u2019t tell them, but they just became your mentors. This is very important: Pick up what they put down. Think of them as offering up quests for you to complete. When they say \u201cAnyone willing to help with __ __?\u201d you\u2019re that kid in the first row with your hand already raised. These are senior engineers, some of the most in-demand people in tech. They\u2019ll spend time with you, 1 on 1, if you help them out (p.s. and there\u2019s always something they want help on). You can\u2019t pay for this stuff. They\u2019ll teach you for free. Most people don\u2019t see what\u2019s right in front of them. But not you.</p> <p>\u201cWith so many junior devs out there, why will they help me?\u201d, you ask.</p> <p>Because you learn in public. By teaching you, they teach many. You amplify them. You have one thing they don\u2019t: a beginner\u2019s mind. You see how this works?</p> <p>At some point people will start asking you for help because of all the stuff you put out. 80% of developers are \u201cdark\u201d, they dont write or speak or participate in public tech discourse. But you do. You must be an expert, right? Don\u2019t tell them you aren\u2019t. Answer best as you can, and when you\u2019re stuck or wrong pass it up to your mentors.</p> <p>Eventually you run out of mentors, and just solve things on your own. You\u2019re still putting out content though. You see how this works?</p> <p>Learn in public.</p> <p>p.s. Eventually, they\u2019ll want to pay you for your help too. A lot more than you think.</p> <p>Author\u2019s Note: I have written an expanded version of this essay and its related canon (below) in The Coding Career Handbook.</p> <p>Read this next: The Ultimate Hack for Learning In Public (expanding on \u201cPick Up What They Put Down\u201d)</p> <ul> <li>Then learn about Learning Gears</li> <li>Not everything must be public: How To Learn In Private</li> <li>A mathematical intuition for why LIP works: Big L Notation</li> <li>Learn how to turn ignorance to power: The Power of Lampshading</li> </ul> <p>This essay was originally drafted in a gist and republished in Letters to a New Developer.</p> <p>Related links</p> <ul> <li> <p>1 Hour Talk version of this essay: https://www.youtube.com/watch?v=znNxtSbuBjI</p> </li> <li> <p>Patio11: Do not end the week with nothing</p> </li> <li> <p>Chris Coyier: Showing up and Persistence and Working in Public</p> </li> <li> <p>Cory House: Becoming an Outlier and The Art of Learning and Lifestyle Systems and The 7 Pillar Developer</p> </li> <li> <p>Jeff Atwood: How to stop sucking and be awesome instead</p> </li> <li> <p>Rachel Thomas: Why You (yes, you!) Should Blog</p> </li> <li> <p>Kent C Dodds: Intentional Career Building</p> </li> <li> <p>Julia Evans: Blog about what you\u2019ve struggled with</p> </li> <li> <p>Joshua Branchaud: Learning In Public by posting daily TIL\u2019s for 5 years</p> </li> <li> <p>Patrick O\u2019Shaughnessy: Learn, Build, Share, Repeat</p> </li> </ul> <p>Learn in public, fanatically. Find something you can\u2019t stop thinking about and know it better than anyone, and share everything you learn along the way. Once deep enough, start building something too. Make something you have to sell as early as possible. - Patrick in David Perell\u2019s Twitter course</p> <ul> <li> <p>LadyBug Podcast: Blogging 101 (esp Ali Spittel\u2019s Blog Post Workflow)</p> </li> <li> <p>GitHub ReadME project: Publishing your work increases your luck (see HN comments)</p> </li> <li> <p>Quincy Larson: Build your Skills, Build your Reputation, Build your Network</p> </li> <li> <p>Ali Spittel on syndicating content on the Arrested DevOps podcast</p> </li> <li> <p>Reid Hoffman: Those Who Teach, Can Do</p> </li> <li> <p>Shu Omi did LIP on YouTube and gained 5k subscribers in 8 months!</p> </li> <li> <p>Kei Watanabe: https://twitter.com/rainar_angelo/status/1519530337285869568</p> </li> <li> <p>Gift Egwuenu on Learning in Public</p> </li> <li> <p>How do Rocket Scientists Learn? (Knowledge Management Lessons learned at Goddard, NASA)</p> </li> </ul> <p>In some places, Knowledge Management is about creating systems that get around people\u2019s knowledge deficiencies. At Goddard, it really seems like it is about empowering people to share and reflect on what they know best. It\u2019s a subtle distinction, but I really like that they put people in the center of this work, and start from a place of abundant knowledge in people rather than a lack of information in systems. Social media has a lot of potential, but you need to think about how to facilitate different kinds of (online and offline) relationships between people so that their thinking is improved, innovation occurs, they can get quick answers to complex problems, in order to enhance and accelerate business outcomes. One of the great benefits of using social media as a KM tool is that you are creating and capturing the knowledge at the same time. However, in order for this to truly work people have to be willing to collaborate in the open throughout the project lifecycle. \u201cLearning in Public\u201d is scary for many reasons \u2013 people can find and cling to outdated information and users are exposing their knowledge during a vulnerable time in the project (i.e. when they don\u2019t yet have all the answers). However, during this part of the process is when learning can be most valuable. If you share what you know and what you don\u2019t know in the middle of a project, you give people an opportunity to share specific knowledge that can help you in the moment. If it works, this can help save time and money.</p> <ul> <li>Nathan Barry in his book Authority:</li> </ul> <p>Back in 2007 Chris Coyier launched a site called css-tricks.com. It was a site dedi- cated to teaching people how to code websites. (CSS is the language that describes how websites should look.) When CSS-Tricks first came out I remember reading a tutorial and arrogantly thinking, \u201cI know that already.\u201d Chris and I were at about the same skill level, so I didn\u2019t learn anything new from him. This continued for a while as he kept putting out new tutorials. But over time, as friends started asking me CSS questions, I found it easier to link to one of Chris\u2019s articles (since they were really well written) than explain everything myself. Years later Chris ran a Kickstarter campaign to redesign his site. Those who con- tributed would get behind-the-scenes access to additional tutorials and content re- lated to the redesign. The goal was set fairly low at $3,500. He quickly blew past the goal and by the end of the campaign had raised $89,697. Incredible. The point is that he did it with relative ease, all because he had built up an audi- ence who loved his work. He and I started at the same point and our skills progressed at about the same rate. The difference was that he taught and shared, whereas I kept what I was learning to myself. That made the difference between being able to make tens of thousands of dollars on a new project versus releasing to no one.</p> <p>Nathan in general has a lot of riffs on LIP:</p> <ul> <li>https://nathanbarry.com/4-ideas/</li> <li>https://nathanbarry.com/consumer-to-creator/</li> <li>https://www.smashingmagazine.com/2013/06/how-to-launch-anything/</li> </ul>"},{"location":"Blog/Oral%20Presentation%20Advice/","title":"Oral Presentation Advice","text":"<p>Oral Presentation Advice</p> <p>Mark D. Hill</p> <p>Computer Sciences Department University of Wisconsin-Madison</p> <p>April 1992; Revised January 1997</p> <ul> <li>Things to Think About</li> <li>A Generic Conference Talk Outline</li> <li>Academic Interview Talks</li> <li>Other Talks</li> <li>How to Give a Bad Talk by David Patterson</li> </ul>"},{"location":"Blog/Oral%20Presentation%20Advice/#things-to-think-about","title":"Things to Think About","text":"<ol> <li>Oral Communication is different from written communication</li> </ol> <p>Listeners have one chance to hear your talk and can't \"re-read\" when they get confused. In many situations, they have or will hear several talks on the same day. Being clear is particularly important if the audience can't ask questions during the talk. There are two well-know ways to communicate your points effectively. The first is to K.I.S.S. (keep it simple stupid). Focus on getting one to three key points across. Think about how much you remember from a talk last week. Second, repeat key insights: tell them what you're going to tell them (Forecast), tell them, and tell them what you told them (Summary).</p> <ol> <li>Think about your audience</li> </ol> <p>Most audiences should be addressed in layers: some are experts in your sub-area, some are experts in the general area, and others know little or nothing. Who is most important to you? Can you still leave others with something? For example, pitch the body to experts, but make the forecast and summary accessible to all.</p> <ol> <li>Think about your rhetorical goals</li> </ol> <p>For conference talks, for example, I recommend two rhetorical goals: leave your audience with a clear picture of the gist of your contribution, and make them want to read your paper. Your presentation should not replace your paper, but rather whet the audience appetite for it. Thus, it is commonly useful to allude to information in the paper that can't be covered adequately in the presentation. Below I consider goals for academic interview talks and class presentations.</p> <ol> <li>Practice in public</li> </ol> <p>It is hard distilling work down to 20 or 30 minutes.</p> <ol> <li>Prepare</li> </ol> <p>See David Patterson's How to Give a Bad Talk</p>"},{"location":"Blog/Oral%20Presentation%20Advice/#a-generic-conference-talk-outline","title":"A Generic Conference Talk Outline","text":"<p>This conference talk outline is a starting point, not a rigid template. Most good speakers average two minutes per slide (not counting title and outline slides), and thus use about a dozen slides for a twenty minute presentation.</p> <ul> <li>Title/author/affiliation (1 slide)</li> <li>Forecast (1 slide)   Give gist of problem attacked and insight found (What is the one idea you want people to leave with? This is the \"abstract\" of an oral presentation.)</li> <li>Outline (1 slide)   Give talk structure. Some speakers prefer to put this at the bottom of their title slide. (Audiences like predictability.)</li> <li>Background</li> <li>Motivation and Problem Statement (1-2 slides)     (Why should anyone care? Most researchers overestimate how much the audience knows about the problem they are attacking.)</li> <li>Related Work (0-1 slides)     Cover superficially or omit; refer people to your paper.</li> <li>Methods (1 slide)     Cover quickly in short talks; refer people to your paper.</li> <li>Results (4-6 slides)   Present key results and key insights. This is main body of the talk. Its internal structure varies greatly as a function of the researcher's contribution. (Do not superficially cover all results; cover key result well. Do not just present numbers; interpret them to give insights. Do not put up large tables of numbers.)</li> <li>Summary (1 slide)</li> <li>Future Work (0-1 slides)   Optionally give problems this research opens up.</li> <li>Backup Slides (0-3 slides)   Optionally have a few slides ready (not counted in your talk total) to answer expected questions. (Likely question areas: ideas glossed over, shortcomings of methods or results, and future work.)</li> </ul>"},{"location":"Blog/Oral%20Presentation%20Advice/#academic-interview-talks","title":"Academic Interview Talks","text":"<p>The rhetorical goal for any interview talk is very different than a conference talk. The goal of a conference talk is to get people interested in your paper and your work. The goal of an interview talk is to get a job, for which interest in your work is one part.</p> <p>There are two key audiences for an academic interview talk, and you have to reach both. One is the people in your sub-area, who you must impress with the depth of your contribution. The other is the rest of the department, who you must get to understand your problem, why it is important, and a hand-wave at what you did. Both audiences will evaluate how well you speak as an approximation of how well you can teach.</p> <p>An algorithm:</p> <ul> <li>Take a 20-minute conference talk.</li> <li>Expand the 5 minute introduction to 20 minutes to drive home the problem, why it's important, and the gist of what you've done.</li> <li>Do the rest of the conference talk, minus the summary and future work.</li> <li>Add 10 minutes of deeper stuff from your thesis (to show your depth). It is okay lose people outside of your sub-area (as long as you get them back in the next bullet).</li> <li>Do the summary and future work from the conference talk in a manner accessible to all.</li> <li>Add 10 ten minutes to survey all the other stuff you have done (to show your breadth).</li> <li>Save 5 minutes for questions (to show that you are organized).</li> </ul>"},{"location":"Blog/Oral%20Presentation%20Advice/#other-talks","title":"Other Talks","text":"<p>Other talks should be prepared using the same principles of considering audience and rhetorical purpose. A presentation on a project in a graduate class, for example, seeks to reach the professor first and fellow students second. Its purpose is to get a good grade by impressing people that a quality project was done. Thus, methods should be described in must more detail than for a conference talk.</p>"},{"location":"Blog/Oral%20Presentation%20Advice/#acknowledgments","title":"Acknowledgments","text":"<p>Thanks to Jim Goodman, Jim Larus, and David Patterson for their useful comments. The current on-line version of this document appears at URL \"http://www.cs.wisc.edu/~markhill/conference-talk.html\".</p> <p>See also translations into Belorussian (by movavi) and Russian (by azoft).</p> <p>How to Give a Bad Talk</p> <p>David A. Patterson</p> <p>Computer Science Division University of California-Berkeley</p> <p>Circa 1983</p> <p>Ten commandments (with annotations gleaned from Patterson's talk by Mark D. Hill):</p> <ol> <li>Thou shalt not be neat</li> </ol> <p>Why waste research time preparing slides? Ignore spelling, grammar and legibility. Who cares what 50 people think?</p> <ol> <li>Thou shalt not waste space</li> </ol> <p>Transparencies are expensive. If you can save five slides in each of four talks per year, you save $7.00/year!</p> <ol> <li>Thou shalt not covet brevity</li> </ol> <p>Do you want to continue the stereotype that engineers can't write? Always use complete sentences, never just key words. If possible, use whole paragraphs and read every word.</p> <ol> <li>Thou shalt cover thy naked slides</li> </ol> <p>You need the suspense! Overlays are too flashy.</p> <ol> <li>Thou shalt not write large</li> </ol> <p>Be humble -- use a small font. Important people sit in front. Who cares about the riff-raff?</p> <ol> <li>Thou shalt not use color</li> </ol> <p>Flagrant use of color indicates uncareful research. It's also unfair to emphasize some words over others.</p> <ol> <li>Thou shalt not illustrate</li> </ol> <p>Confucius says <code>*A picture = 10K words*,'' but Dijkstra says</code>Pictures are for weak minds.'' Who are you going to believe? Wisdom from the ages or the person who first counted goto's?</p> <ol> <li>Thou shalt not make eye contact</li> </ol> <p>You should avert eyes to show respect. Blocking screen can also add mystery.</p> <ol> <li>Thou shalt not skip slides in a long talk</li> </ol> <p>You prepared the slides; people came for your whole talk; so just talk faster. Skip your summary and conclusions if necessary.</p> <ol> <li> <p>Thou shalt not practice</p> <p>Why waste research time practicing a talk? It could take several hours out of your two years of research. How can you appear spontaneous if you practice? If you do practice, argue with any suggestions you get and make sure your talk is longer than the time you have to present it.</p> </li> </ol> <p>Commandment X is most important. Even if you break the other nine, this one can save you.</p>"},{"location":"Blog/Rest%20in%20motion/","title":"Rest in motion (\u8fd0\u52a8)","text":"<p>28 JUNE 2015</p> <p>Many people seem to think the 'good' state of being, the 'ground' state, is a relaxed state, a state with lots of rest and very little action. Because they think the ground state is the relaxed state, they act like maintaining any other state requires effort, requires suffering.</p> <p>This is a failure mode that I used to fall into pretty regularly. I would model my work as a finite (\u6709\u9650) stream of tasks that needed doing. I'd think \"once I've done the laundry and bought new shoes and finished the grocery shopping and fixed the bugs in my code and finished the big refactor, everything will be in order, and I'll be able to rest.\" And in that state of mind, every new email that hit my inbox, every new bug discovered in my code, every tool of mine that wore down and needed repair, would deal me damage.</p> <p>I was modeling my work as finite (\u6709\u9650) , with the rest state being the state where all tasks were completed, and so every new task would push me further from that precious rest state and wear me down.</p> <p>But the work that needs to be done is not a finite (\u6709\u9650) list of tasks, it is a neverending stream. Clothes are always getting worn down, food is always getting eaten, code is always in motion (\u8fd0\u52a8) . The goal is not to finish all the work before you; for that is impossible. The goal is simply to move through the work. Instead of struggling to reach the end of the stream, simply focus on moving along it.</p> <p>Advertisements and media often push the narrative (\u53d9\u4e8b) that the purpose of all our toil is to win a chance at relaxation. We're supposed to work hard at boring jobs in order to earn our vacations. We're supposed to work hard for decades so that we can retire. (We're supposed to conceive (\u53d7\u5b55) of heaven as a place where nobody does anything except lounge on clouds.)</p> <p>I call bullshit. For almost everybody, inaction is boring. That's why we pick up books, go exploring, and take up hobbies. The ground state is an active state, not a passive one.</p> <p>The actual reward state is not one where you're lazing around doing nothing. It's one where you're keeping busy, where you're doing things that stimulate you, and where you're resting only a fraction (\u5206\u6570) of the time. The preferred ground state is not one where you have no activity to partake in, it's one where you're managing the streams of activity precisely, and moving through them at the right pace: not too fast, but also not too slow. For that would be boring.</p> <p>And yet, most people have this model of the world where whenever they're not resting, they're taking damage. When the homework isn't done, they're taking damage. When they're reading a textbook, they're taking damage. When they go to sleep with work unfinished, they're taking damage. When they're at a large social event, they're taking damage. Some part of them yearns to be in the rest state, where they don't need to do all these things, and insofar as they aren't, they're suffering a little.</p> <p>This is a grave error, in a world where the work is never finished, where the tasks are neverending.</p> <p>Rest is not a reward for getting through all your obligations. You already dropped your obligations, remember? Rather, rest (and personal health, and personal time) are part of the goal. Both because most people care about their personal comfort, and because taking care of yourself is very important in order to do all the other things you want to do.</p> <p>Rest isn't something you do when everything else is finished. Everything else doesn't get finished. Rather, there are lots of activities that you do, some which are more fun than others, and rest is an important one to do in appropriate proportions. Disconnect your impulse (\u51b2\u52a8) to rest from whether or not the world is in a stable state, because, spoiler alert, the world isn't going to be in a stable state for a long time.</p> <p>Rest isn't a reward for good behavior! It's not something you get to do when all the work is finished! That's finite (\u6709\u9650) task thinking. Rather, rest and health are just two of the unending streams that you move through.</p> <p>Imagine the person who is tight on money and needs to buy groceries once a month. Imagine that they agonize over every purchase, even though they know that they're buying as little as they can in order to secure the health of their family. You might suggest to them that they stop fretting over individual purchases and come to terms once and for all with the fact that food is a necessary purchase, and suggest that they fret over their budget instead. That way, they won't need to suffer every time they enter a grocery store.</p> <p>The same technique applies to effort. You don't need to suffer every time it's time to do the laundry. Stop looking at the individual tasks, and start looking at the streams of work, some of which you can widen and some of which you can narrow.</p> <p>Look at all the streams you want to move through, assess how much bandwidth you have available, and then simply move through the streams at the appropriate clip. Some streams will be unpleasant (chores, etc.), some will be basically mandatory (making money, etc.), some will be quite fun (learning, exploring, relaxing, etc.), and some of the most important streams are the meta streams (improving your capacity, finding better ways to fulfill (\u5c65\u884c) your needs, etc.). But in all cases, simply see the streams and then move along them.</p> <p>Many people I meet seem to think that they need to take damage whenever they're working, and then only heal it when they rest. While they're studying, they're taking damage. While they're at a large social event, they're taking damage. While they're doing their job, they're taking damage. They seem to think they \"should\" be able to be at home doing nothing, and so when they're not, they're taking damage. They think that the ground state is a resting state, a state of inaction, and so whenever they're acting, this is a deviation from the default, and it requires effort to maintain.</p> <p>I say, the ground state is in motion (\u8fd0\u52a8) . The privileged state is not a frozen state. Most of us wouldn't want to just lie in bed doing nothing forever, anyway. The easiest state to maintain isn't a motionless state, it's the state where you're out there doing what needs doing at a sustainable pace. That's the ground state, that's the state that requires no effort to maintain. Anything less leads to boredom, and it's boredom that's taxing.</p> <p>I think one of the reasons people think high productivity is hard is that they think of lying in bed doing nothing as the default state, and anything else as taking damage. But it's not. It's really not. We were built to move, and we have things to do.</p> <p>Make sure you're not taking damage just for moving. If any state of being is going to wear you down, then I suggest that you feel pressure whenever you start to move too fast or too slow. Take damage when your life is too boring and nothing's getting done, and take damage when your life is moving at an unsustainable (\u96be\u4ee5\u4e3a\u7ee7) pace: but don't take damage when you're moving through the streams at a steady clip.</p> <p>The default state, the effortless state, is the one where you're moving along many streams. It is up to you to make sure that you're prioritizing the right streams and that you're steadily increasing your throughput, but the end goal is not to cease moving. Total inaction is dreadfully boring.</p> <p>The ground state, the state to aspire to, the healthy state, the state that occurs naturally when you aren't forcing yourself to do anything, is the state where you're getting done what you want done as fast as is sustainable, and no faster.</p> <p>The ground state is in motion (\u8fd0\u52a8) .</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/","title":"The Code Review Pyramid","text":"<p>Posted at Mar 10, 2022</p> <p>When it comes to code reviews, it\u2019s a common phenomenon that there is much focus and long-winded discussions around mundane aspects like code formatting and style, whereas important aspects (does the code change do what it is supposed to do, is it performant, is it backwards-compatible for existing clients, and many others) tend to get less attention.</p> <p>To raise awareness for the issue and providing some guidance on aspects to focus on, I shared a small visual on Twitter the other day, which I called the \"Code Review Pyramid\". Its intention is to help putting focus on those parts which matter the most during a code review (in my opinion, anyways), and also which parts could and should be automated.</p> <p>As some folks asked for a permanent, referenceable location of that resource and others wanted to have a high-res printing version, I\u2019m putting it here again:</p> <p></p> <p>Two goals of Code Review.</p> <ul> <li>Improve code quality. Find bugs, predict possible bugs, check code clarity, and check consistency of coding style</li> <li>Improve programmer level. Code Review to learn new language features, project design, code specification.</li> </ul> <p>Bad taste code example 1.</p> Java<pre><code>public static int dayOfYear(int month, int dayOfMonth, int year) {\nif (month == 2) {\ndayOfMonth += 31;\n} else if (month == 3) {\ndayOfMonth += 59;\n} else if (month == 4) {\ndayOfMonth += 90;\n} else if (month == 5) {\ndayOfMonth += 31 + 28 + 31 + 30;\n} else if (month == 6) {\ndayOfMonth += 31 + 28 + 31 + 30 + 31;\n} else if (month == 7) {\ndayOfMonth += 31 + 28 + 31 + 30 + 31 + 30;\n} else if (month == 8) {\ndayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31;\n} else if (month == 9) {\ndayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 30 + 31 + 31;\n} else if (month == 10) {\ndayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 31 + 30;\n} else if (month == 11) {\ndayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 31 + 30 + 31;\n} else if (month == 12) {\ndayOfMonth += 31 + 28 + 31 + 30 + 31 + 30 + 30 + 31 + 31 + 30 + 31 + 31 + 31;\n}\nreturn dayOfMonth;\n}\n</code></pre>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#dont-repeat-yourself-dry","title":"Don't repeat yourself (DRY)","text":"<p>Repeating code is dangerous, for example, if you have similar or identical code in two places, you may have bugs in both places, and if you fix the problem in one place you may forget to fix the other.</p> <p>For example, the above code repeats the number of days in each month, and dayOfMonth += repeats several times.</p> <p>Improvement: you can store the number of days in an array and for while loop to streamline dayOfMonth +=.</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#good-annotations","title":"Good annotations","text":"<p>Good software developers write just the right amount of comments for their code. Good comments make code easier to understand, less buggy, and easier to change.</p> <ul> <li>An important comment that appears before a method, or class, is a specification. in Java, it is usually written as a Javadoc comment that starts with / ** and contains @ syntax, such as @param and @return for methods.</li> <li>Another key kind of comment specifies the source of a piece of code copied or adapted from elsewhere.</li> <li>Not every statement needs to be commented, and the reader is at least aware of the usage of the programming language. Comments should be added for obscure code.</li> </ul> <p>For example, in the above example, you should add whether the number of months is calculated from 1-12 or 0-11.</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#fail-fast","title":"Fail fast","text":"<p>Failing fast means that the code should expose bugs as early as possible, and the earlier the problem is found, the easier it is to find and fix it.</p> <p>For example, the above method is not Fail fast, and if the parameters are passed incorrectly you may get the wrong result. Improvements can be made by changing the parameter type, the month being represented by an enumeration, or checking the month range to throw an exception.</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#avoid-magic-numbers","title":"Avoid magic numbers","text":"<p>There is a computer science joke that the only numbers computer scientists can understand are 0, 1, and sometimes 2. All other numbers are called magic numbers. One way to do this is to annotate the number, or better yet, declare the number as a constant with a good clear name.</p> <ul> <li>Numbers have no names to make them readable.</li> <li>Numbers may need to be changed in the future.</li> <li>Numbers may depend on other numbers. Therefore, you should not hard-code numbers that are calculated manually.</li> </ul> <p>For example, in the above example, the month and days are magic numbers</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#one-variable-one-purpose","title":"One variable, one purpose","text":"<p>Variables are not a scarce resource, feel free to introduce them and give them good names. Method names should be as immutable as possible.</p> <p>For example in the above example dayOfMonth is used to calculate the number of days as the return result.</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#good-naming","title":"Good naming","text":"<p>Good method and variable names are long and self-descriptive. Good method names and variable names tend to avoid a lot of comments.</p> <p>For example, variable names tmp, temp, data are poor naming and meaningless.</p> <p>In Java naming.</p> <ul> <li>methodsAreNamedWithCamelCaseLikeThis</li> <li>variablesAreAlsoCamelCase</li> <li>CONSTANTS_ARE_IN_ALL_CAPS_WITH_UNDERSCORES</li> <li>ClassesAreCapitalized</li> <li>packages.are.lowercase.and.separated.by.dots</li> </ul> <p>Method names usually use verb phrases, and variable names are usually noun phrases. Choose simple and precise words to avoid abbreviations. For example message is better than msg.</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#use-whitespace-to-help-the-reader","title":"Use whitespace to help the reader","text":"<p>Use consistent indentation. Whitespace and tab keys are benevolent, personally I advocate using whitespace (because different tools treat whitespace rules differently) and setting the tab key to whitespace for the editor.</p> <p>Bad taste example 2:</p> Java<pre><code>public static int LONG_WORD_LENGTH = 5;\npublic static String longestWord;\n\npublic static void countLongWords(String text) {\nString[] words = text.split(' ');\nif (words.length == 0) {\nSystem.out.println(\"0\");\nreturn;\n}\nint n = 0;\nlongestWord = \"\";\nfor (String word: words) {\nif (word.length() &gt; LONG_WORD_LENGTH) ++n;\nif (word.length() &gt; longestWord.length()) longestWord = word;\n}\nSystem.out.println(n);\n}\n</code></pre>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#dont-use-global-variables","title":"Don't use global variables","text":"<p>Global variable: is a variable whose value can be changed; it can be accessed and changed anywhere in the program.</p> <p>In Java <code>public static</code> is used to declare global variables. By adding final you can declare a global constant, which is common as well as useful.</p> <p>In the above example: LONG_WORD_LENGTH, longestWord are global variables</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#methods-should-return-results-instead-of-printing-them","title":"Methods should return results instead of printing them","text":"<p>For example the above method is not easy to change, its prints the result to the terminal. Only the top-level program should interact with the user, and the bottom-level program should return the output as a result. The only exception is debugging output, which can of course be output to the console. But this output should not be part of the design, but should be part of the debugging design.</p>"},{"location":"Blog/The%20Code%20Review%20Pyramid/#avoid-special-case-code","title":"Avoid special case code","text":"<p>It is common for programmers to write special code to handle special cases, such as zero parameters, empty lists, and empty strings. For example, the above example determines that the words list is empty and the if statement is redundant. In fact, handling this special case separately has led to possible errors - empty lists are handled differently than non-empty lists that happen to have no long words.</p> <p>Actively resist the temptation to handle special cases separately. Writing more extensive generic code will pay off; it leads to shorter methods, easier to understand, and fewer places to hide errors. It is likely to be safer from errors because it makes fewer assumptions about the values used. Also, it is more prepared for changes because there are fewer places to update when changing the behavior of a method. Write clean, simple, generic algorithms first, and then optimize them when there is practical help.</p> <p>To summarize: good software needs to have three key properties.</p> <ul> <li>Safe from bugs. DRY helps developers to fix bugs in only one place, using clear comments to document assumptions prevents other programmers from introducing bugs, Fail fast helps to catch bugs early, and avoiding global variables helps to locate bugs related to local variables.</li> <li>Easy to understand. Code review is the only way to find obscure code as other programmers read it and try to understand it. Using just the right comments, avoiding magic numbers, one variable for one purpose, better naming, and better use of spaces can all provide code understandability.</li> <li>Ready for change. DRY code is easier to change, and returning results instead of printing output makes the code easier to adapt to new purposes.</li> </ul>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/","title":"Tips about writing systems papers","text":"<p>by Lin Zhong, May 2015</p> <p>If I can give one tip, that would be: respect your readers.</p>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#put-yourself-into-your-readers-shoes","title":"Put yourself into your readers' shoes","text":"<p>It is important to visualize your readers and how they read your paper. You hope they would enjoy your paper like you enjoyed the Harry Potter books; you hope they would study your work like you studied your Physics 101 textbook; at least you hope they would read your paper like how you read a classic paper recently. Such hopes are completely false, because nobody reads technical papers for recreation, you are obviously not writing a textbook, and more importantly, your paper is not yet published, let alone being a classic.</p> <p>So how does a reader read your paper? Or more precisely, how does a reviewer read your paper? They try to finish the job as fast as possible. Peer-review is a service that does not pay. Reviewers try to understand the work as fast as possible so that they can do their job: write a review and decide if they want to champion for reject, accept or they don't really care. Often they have a dozen or so papers to review and likely are already behind the deadline. So you can imagine their most likely mood at this point: impatient, perhaps irritable. Well if you are really really lucky, one of your reviewers is reading your paper one month before the deadline on the beach with a glass of sparkling wine. But I can tell you that rarely happens.</p> <p>Importantly, top publication venues usually have a very low acceptance rate, accepting one out of five submissions or less. That means the majority of the papers read by a reviewer are likely to be rejected. Therefore, it is not unusual a reviewer starts reading each paper with a subconscious bias looking for reasons to reject it. So much so that many TPC chairs these days try very hard to guide the reviewers to read submissions with a positive mindset and to focus on identifying values, instead of flaws. Until they are successful, you can safely assume your reviewers are hostile in that they are looking for reasons to reject your paper. Your job is to win them back.</p> <p>In the rest of this article, readers include reviewers, the very first outside readers of your paper.</p>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#general-techniques","title":"General techniques","text":"<p>Once you decide to make readers' life easier, you would immediately realize there are numerous ways, each of which, of course, requires you to spend more time with your draft. Below I summarize a few useful general techniques, roughly categorized as presentation and logic.</p>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#presentation","title":"Presentation","text":"<ul> <li>Be concise. Every word slows the reader a little. See if you can say the same thing with fewer words. Remove a word, sentence, paragraph, figure, section unless they are absolutely necessary. The same principle applies to conceptual units: remove a definition, system component, design detail unless they are absolutely necessary. Resist the urge to tell readers everything. Instead, tell them enough for them to appreciate your points.</li> <li>Write top-down. Always put your point upfront because readers are impatient and skimming. This rule applies to structures at all levels from paragraph to section. A point is what you want the readers to remember, not a summary of the content but the conclusion supported by it. For instance, the point of the evaluation section is <code>Experimental evidence demonstrates our solution advances the state of the art'', not</code>We report extensive experimental evaluation that compares our solution against the state of the art.''</li> <li>Use active voice. You don't want readers to guess who did something or contributed an opinion. You don't want them to guess which component of your system is behind an action.</li> <li>Use structure. Your readers, Homo sapiens, have 5 to 9 entries in their short-term memory. Structure helps them abstract/chunk materials in order to use these entries efficiently. It also makes relationships between structural components obviously. A very long paragraph, a page of paragraph after paragraph, and a section of a large number (7 or more) of subsections are signs that structure may be necessary. The lack of structure often results from the lack of focus or abstraction. Focus requires one to ignore unimportant things; abstraction requires one to identify unifying themes, crosscutting principles, and high-level relations.</li> <li>Use simple English. Many graduate students incorrectly believe a good paper should read like the essays they studied for GRE. Remember the GRE essays were selected to evaluate your reading capability. You absolutely don't want your own readers to feel that you are evaluating their reading capability. Avoid long sentences; avoid complicated sentence structures; avoid arcane terms/idioms; avoid big, showy words. You are welcome to try them after you have got some grey hairs.</li> <li>Use graphs effectively. Most readers pay attention to graphs. Make sure each graph deliver an important point. Make sure it can do so by itself (so make good use of its caption). Do refer to the graph in the text so that it assists understanding.</li> </ul>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#logic","title":"Logic","text":"<ul> <li>Don't surprise. Set up the right expectation. Don't promise early on, e.g., in abstract and introduction, more than you deliver later, e.g., design, implementation and evaluation. A very common reviewer comment is ``I started reading this paper with excitement but the more I read the more I was disappointed.\"</li> <li>Don't handwave. Quantify a claim. For example, when you say <code>our solution significantly outperforms the state of the art'', don't stop there but quantify</code>significantly\" with <code>improving the data rate by three times''. For another example, when you say</code>our design requires very small changes to the Linux kernel\", quantify it with ``with only 3 added code line at a single location''. Cite an authoritative source for a fact that is not yet widely known but key to your point.</li> <li>Don't haunt readers. As people read, they will have questions. Some questions may trouble them if not answered soon. I call such questions the haunting questions. You must anticipate such questions and answer them before a reader starts to wonder. If you can't answer them immediately, do acknowledge their existence and assure the reader you will answer them later with a forward reference.</li> <li>Be consistent. Consistency in naming and style makes your writing easier to understand. Call the same thing the same name. If one figure shows the software stack vertically and another horizontally, you make readers' job more difficult. When figures of similar plots are grouped together, e.g., speed vs. number of processors for several benchmarks, make their axes consistent in terms of unit and range. When it is impossible, e.g., one benchmark has higher speed by orders of magnitude than others, highlight that inconsistency, e.g., pointing it out in the caption or using a different font size for the inconsistent axis.</li> </ul>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#specialized-techniques","title":"Specialized techniques","text":"<p>Now I describe tips for important structural components of system papers.</p>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#title","title":"Title","text":"<p>A good title captures both the problem addressed by the paper and the novel solution contributed. To avoid a title too long, it often suffices to capture the problem only.</p>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#abstract-and-introduction","title":"Abstract and Introduction","text":"<p>Many readers only read the abstract and introduction. Many a reviewer makes up their mind after reading them. The introduction is so important that even the most hands-off advisors will read, revise, and sometimes rewrite it. I suspect that's a major source of surprises and inconsistencies. The introduction should summarize the entire paper crisply and bring out major points you want readers to walk away with.</p> <ul> <li>Motivation. There is a delicate balance one must achieve here with intended readers in mind. A problem well-known to your intended readers needs no motivation but a simple statement of its importance, e.g., ``Energy efficiency is a critical design concern for battery-powered mobile devices''. An emerging problem anticipated by you or a small part of the community requires more explanation. However, the motivation should never be more than a small paragraph, simply because readers are impatient: they want to get to your problem statement quick. If you have a rather long motivation, either it contains a lot of obvious, well-known materials or you are solving a trivial problem.</li> <li>Problem statement. Don't wait too long to state the problem. If the motivation is a small paragraph, the problem statement can be the first sentence of the second paragraph. The problem statement must be obvious, prominent, explicit. For example, ``This paper answers the following question:...\", \"Our goal is to support concurrent computer vision applications efficiently\", and \"This paper presents our design and implementation of a system that supports concurrent computer vision applications efficiently.\" A common mistake is to place the problem statement at the end of a paragraph that elaborates the problem; instead, the statement should be placed at the opening of the paragraph. Remember to write top-down.</li> <li>Prior work. After the problem statement, you need to concisely explain why prior work is inadequate. There is no need to discuss related papers one by one here.</li> <li>Key ideas. Without reading the rest of the paper, a reader must appreciate why you are able to solve the problem while prior work falls short. Therefore, you need to explain your key ideas, secret sauce, explicitly and prominently in the introduction. For example, \"Our design is based on two novel insights. First,...\", \"We solve the problem with a clever synthesis of technique A and technique B.\"</li> <li>Evaluation results. Summarize how you evaluate your work and the main results. Be quantitative. Be upfront about negative results.</li> <li>Contribution summary. In order to help the reader, especially the reviewer, provide an itemized summary of your contributions. There should be no more than three or four items.</li> </ul>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#background","title":"Background","text":"<p>Unless you are writing for a very narrow community, it is very likely your readers do not have all the background to appreciate your work. So educate them. A nicely written background section is always enjoyable. Indeed, learning something new so quickly is one of the perks of doing reviews. The challenge is: the background section must be self-contained, concise, clear. This often requires a deep understanding of who your intended readers are. For a paper submission, it often helps to take a look at the program committee and imagine which members are likely to review your paper.</p>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#design","title":"Design","text":"<p>For a systems paper, it is often nice to describe design and implementation separately. The design section often presents ideas that are agnostic to any specific implementation. These include the overall architecture, principles and algorithms.</p> <p>A common mistake of the design section is lack of structure, e.g., a section of seven or more subsections each describing a component of the design. As mentioned above, the lack of structure often results from the lack of focus or abstraction. For example of lack of focus, the authors simply describe each system components, regardless of how interesting/novel they are. If the system has a lot of components, this strategy leads to a flat section with many subsections. One naturally solution is to use a subsection to provide an overview of the design and then use subsections to explain only important components that are novel and interesting. Presenting the design by component is often a sign of lack of abstraction. System component is just one possible dimension along which you can present the design. There are other dimensions, e.g., design objectives and principles/invariants followed. Discovering these dimensions require you to think about your design in an abstract way.</p> <p>Another common mistake is failure to place a design choice in the context, e.g., simply describing it. There are two types of context that add depth. First, how is your choice related to prior work? Perhaps no one has solved the exactly same problem but it is highly likely others have faced similar challenges in solving a related one. It is important to be aware of how others made the choice and explain how their choice affected your choice. This is also a perfect place to give prior work credit. Second, what alternatives have you considered? It is highly unlikely your choice is straightforward or obvious (if it is, you should not spend a lot of space highlighting it). Share with readers what other choices you have considered and why you passed them in favor of the one ended up in the design.</p>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#implementation","title":"Implementation","text":"<p>The section of implementation should not be a boring description. It should present interesting things about your implementation. If there is nothing interesting, the section should be very brief, providing the necessary information for readers to assess the quality of your evaluation, which is presumably based on the implementation.</p> <p>What are the interesting things about the implementation? As the implementers, you should know. For example, any nontrivial challenges have you had to overcome? How does the implementation have to deviate from the design due to practical limitations? Any platform-specific optimization?</p> <p>It is important to let the readers know how significant the implementation effort is. You can quantify it with the number of lines of code and the number of man-hours.</p>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#evaluation","title":"Evaluation","text":"<p>Since this article is about writing, instead of research itself, I will focus on writing, assuming you have done all the right things in evaluating your work.</p> <ul> <li>Retain a neutral tone toward your solution. It is important to remember that the objective of evaluation is NOT to show that your solution works. Instead, it is to show how well it works, importantly when it works and when it does not.</li> <li>Be explicit upfront about what questions you want to answer. These questions are often related to the contributions you claim. For example, if you claim a novel optimization A that saves a lot of energy, the question to answer via evaluation would be \"how much energy does A save? How does the saving depends on operational parameters?\"</li> <li>Acknowledge the limitations of your evaluation. And explain how it may affect the conclusions you draw. When you acknowledge them, readers find you honest, trustworthy; when you don't, they are more likely to consider the evaluation as contrived.</li> <li>Share negative results. A very common mistake is to only show positive results. Unless your solution always works, it is your responsibility to tell readers when it works and when it does not. In other words, you have to specify the scope under which your solution works. Sharing negative results not only adds depth to your paper but also impresses readers as being honest: too many times I have heard reviewers complaining the evaluation setup appears to be contrived, the benchmarks appear to be cherry-picked. To the contrary of the belief by many young researchers, sharing negative results actually strengthens your paper and earns respect from readers.</li> <li>Provide necessary information for reproducibility. The key of scientific and engineering research is reproducibility. That is, others should be able to follow your writing and reproduce your results. For software, it is nice to make it openly available, open-source or not. When machine configurations matter, you should consider providing a virtual machine with the same configuration as used in the reported evaluation. Where the physical setup matters, e.g., wireless channels, be specific about the physical parameters, e.g., providing a floor map with node locations precisely marked.</li> </ul>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#related-work","title":"Related work","text":"<p>The related work section is important in many ways. It sets your work in the larger intellectual context and explains how it advances the state of the art. For novice readers, it points out a quality collection of good works that they can follow up. For expert readers, it is the perfect place to check the authors' mastery of the topic area. For the authors of the cited work, it is where their own work is discussed, credited and criticized. A well-written section of related work always wins respect from its readers. Below are a few tips.</p> <ul> <li>Use structure. Don't discuss related works simply one by one. Discuss them in groups. For each group, start with the common things of the group and then important ones one by one. Of course this requires you to understand how related works are related to each other and to your own work.</li> <li>Be generous. First, when discussing a related work, don't just focus on how it is different: start with how it is similar. Don't just criticize its shortcomings: start with its strength and value. Second, give benefit of doubt to a related work. Don't interpret it in favor of your work. For example, when a related work did not mention whether its idea works for iOS, you should not interpret that as the idea will not work for iOS. A general way to examine if your discussion is generous is to imagine if you were the author of the discussed related work, would you like the way it is discussed?</li> <li>Be insightful. Don't be content with superficial similarity and dissimilarity. Only when you point out something non-obvious, you earn readers' respect for your insight.</li> </ul>"},{"location":"Blog/Tips%20about%20writing%20systems%20papers/#recommended-books","title":"Recommended books","text":"<p>I ask all my students to buy and read the following two books:</p> <ul> <li>The elements of style by William Strunk Jr. and E. B. White (any edition).</li> <li>Style: lessons in clarity and grace by Joseph Willims and Gregory G. Colomb (any edition, I have 10th).</li> </ul> <p>The following book is more specialized for Computer Science but I have not read it as carefully as the above two:</p> <ul> <li>Writing for computer science by Justin Zobel.</li> </ul>"},{"location":"Blog/Why%20does%20calloc%20exist/","title":"Why does calloc exist?","text":"<p>MON 05 DECEMBER 2016</p> <p>[Edit: Welcome Hacker News readers! Before we dive into the neat memory management esoterica, I want to briefly note that as engineers we have an ethical obligation in our work to consider the \"safety, health, and welfare of the public\", because if we don't, terrible things happen. This is a challenging responsibility that requires we all stay thoughtful and informed \u2013 but that's difficult if popular technical news aggregators choose to censor links and discussions about the societal implications of technology. I sympathize with their moderation challenges, but this idea of creating a politics-free safe space is the cowards' way out, quite literally choosing the \"absence of tension\" over \"the presence of justice\". I hope the HN moderators find a way to step up to the responsibility their position entails; in the mean time, you might consider also subscribing to to The Recompiler and Model View Culture, and checking out Safety Pin Box, techsolidarity.org, or Fund Club. Anyway, thanks for listening! We now return to our regularly scheduled <code>calloc</code>-related programming, and I hope you enjoy my essay. And if you like this, you might also enjoy Cory Benfield's related post.]</p> <p>When programming in C, there are two standard ways to allocate some new memory on the heap:</p> Text Only<pre><code>void* buffer1 = malloc(size);\nvoid* buffer2 = calloc(count, size);\n</code></pre> <p><code>malloc</code> allocates an uninitialized array with the given number of bytes, i.e., <code>buffer1</code> could contain anything. In terms of its public API, <code>calloc</code> is different in two ways: first, it takes two arguments instead of one, and second, it returns memory that is pre-initialized to be all-zeros. So there are lots of books and webpages out there that will claim that the <code>calloc</code> call above is equivalent to calling <code>malloc</code> and then calling <code>memset</code> to fill the memory with zeros:</p> Text Only<pre><code>/* Equivalent to the calloc() call above -- OR IS IT?? */\nvoid* buffer3 = malloc(count * size);\nmemset(buffer3, 0, count * size);\n</code></pre> <p>So... why does <code>calloc</code> exist, if it's equivalent to these 2 lines? The C library is not known for its excessive focus on providing convenient shorthands!</p> <p>It turns out the answer is less widely known than I had realized! If I were Julia Evans at this point I'd make a neat little comic \ud83d\ude0a. But I'm not, so... here's a wall of text.</p> <p>It turns out there are actually two differences between calling <code>calloc</code>, versus calling <code>malloc</code> + <code>memset</code>.</p>"},{"location":"Blog/Why%20does%20calloc%20exist/#difference-1-computers-are-bad-at-arithmetic","title":"Difference #1: computers are bad at arithmetic","text":"<p>When <code>calloc</code> multiplies <code>count * size</code>, it checks for overflow, and errors out if the multiplication returns a value that can't fit into a 32- or 64-bit integer (whichever one is relevant for your platform). This is good. If you do the multiplication the naive way I did it above by just writing <code>count * size</code>, then if the values are too large then the multiplication will silently wrap around, and <code>malloc</code> will happily allocate a smaller buffer than we expected. That's bad. \"This part of the code thought the buffer was this long but that part of the code thought it was that long\" is the beginning of, like, eleventy-billion security advisories every year. (Example)</p> <p>I wrote a little program to demonstrate. It tries to allocate an buffer containing 263\u2005\u00d7\u2005263\u2005=\u20052126 bytes, first using <code>malloc</code> and then using <code>calloc</code>:</p> <p>Download source: calloc-overflow-demo.c</p> Text Only<pre><code> 6int main(int argc, char** argv)\n 7{\n 8    size_t huge = INTPTR_MAX;\n 9\n10    void* buf = malloc(huge * huge);\n11    if (!buf) perror(\"malloc failed\");\n12    printf(\"malloc(huge * huge) returned: %p\\n\", buf);\n13    free(buf);\n14\n15    buf = calloc(huge, huge);\n16    if (!buf) perror(\"calloc failed\");\n17    printf(\"calloc(huge, huge) returned: %p\\n\", buf);\n18    free(buf);\n19}\n</code></pre> <p>On my computer, I get:</p> Text Only<pre><code>~$ gcc calloc-overflow-demo.c -o calloc-overflow-demo\n~$ ./calloc-overflow-demo\nmalloc(huge * huge) returned: 0x55c389d94010\ncalloc failed: Cannot allocate memory\ncalloc(huge, huge) returned: (nil)\n</code></pre> <p>So yeah, apparently <code>malloc</code> successfully allocated a 73786976294838206464 exbiyte array? I'm sure that will work out well. This is a nice thing about <code>calloc</code>: it helps avoid terrible security flaws.</p> <p>But, it's not that exciting. (I mean, let's be honest: if we really cared about security we wouldn't be writing in C.) It only helps in the particular case where you're deciding how much memory to allocate by multiplying two numbers together. This happens, it's an important case, but there are lots of other cases where we either aren't doing any arithmetic at all, or where we're doing some more complex arithmetic and need a more general solution. Plus, if we wanted to, we could certainly write our own wrapper for <code>malloc</code> that took two arguments and multiplied them together with overflow checking. And in fact if we want an overflow-safe version of <code>realloc</code>, or if we don't want the memory to be zero-initialized, then... we still have to do that. So, it's... nice? But it doesn't really justify <code>calloc</code>'s existence.</p> <p>The other difference, though? Is super, super important.</p>"},{"location":"Blog/Why%20does%20calloc%20exist/#difference-2-lies-damned-lies-and-virtual-memory","title":"Difference #2: lies, damned lies, and virtual memory","text":"<p>Here's a little benchmark program that measures how long it takes to <code>calloc</code> a 1 gibibyte buffer versus <code>malloc+memset</code> a 1 gibibyte buffer. (Make sure you compile without optimization, because modern compilers are clever enough to know that <code>free(calloc(...))</code> is a no-op and optimize it out!) On my laptop I get:</p> Text Only<pre><code>~$ gcc calloc-1GiB-demo.c -o calloc-1GiB-demo\n~$ ./calloc-1GiB-demo\ncalloc+free 1 GiB: 3.44 ms\nmalloc+memset+free 1 GiB: 365.00 ms\n</code></pre> <p>i.e., <code>calloc</code> is more than 100x faster. Our textbooks and manual pages says they're equivalent. What the heck is going on?</p> <p>The answer, of course, is that <code>calloc</code> is cheating.</p> <p>For small allocations, <code>calloc</code> literally will just call <code>malloc+memset</code>, so it'll be the same speed. But for larger allocations, most memory allocators will for various reasons make a special request to the operating system to fetch more memory just for this allocation. (\"Small\" and \"large\" here are determined by some heuristics inside your memory allocator; for glibc \"large\" is anything &gt;128 KiB, at least in its default configuration).</p> <p>When the operating system hands out memory to a process, it always zeros it out first, because otherwise our process would be able to peek at whatever detritus was left in that memory by the last process to use it, which might include, like, crypto keys, or embarrassing fanfiction. So that's the first way that <code>calloc</code> cheats: when you call <code>malloc</code> to allocate a large buffer, then probably the memory will come from the operating system and already be zeroed, so there's no need to call <code>memset</code>. But you don't know that for sure! Memory allocators are pretty inscrutable. So you have to call <code>memset</code> every time just in case. But <code>calloc</code> lives inside the memory allocator, so it knows whether the memory it's returning is fresh from the operating system, and if it is then it skips calling <code>memset</code>. And this is why <code>calloc</code> has to be built into the standard library, and you can't efficiently fake it yourself as a layer on top of <code>malloc</code>.</p> <p>But this only explains part of the speedup: <code>memset+malloc</code> is actually clearing the memory twice, and <code>calloc</code> is clearing it once, so we might expect <code>calloc</code> to be 2x faster at best. Instead... it's 100x faster. What the heck?</p> <p>It turns out that the kernel is also cheating! When we ask it for 1 GiB of memory, it doesn't actually go out and find that much RAM and write zeros to it and then hand it to our process. Instead, it fakes it, using virtual memory: it takes a single 4 KiB page of memory that is already full of zeros (which it keeps around for just this purpose), and maps 1 GiB / 4 KiB = 262144 copy-on-write copies of it into our process's address space. So the first time we actually write to each of those 262144 pages, then at that point the kernel has to go and find a real page of RAM, write zeros to it, and then quickly swap it in place of the \"virtual\" page that was there before. But this happens lazily, on a page-by-page basis.</p> <p>So in real life, the difference won't be as stark as it looks in our benchmark up above \u2013 part of the trick is that <code>calloc</code> is shifting some of the cost of zero'ing out pages until later, while <code>malloc+memset</code> is paying the full price up front. BUT, at least we aren't zero'ing them out twice. And at least we aren't trashing the cache hierarchy up front \u2013 if we delay the zero'ing until we were going to write to the pages anyway, then that means both writes happen at the same time, so we only have to pay one set of TLB / L2 cache / etc. misses. And, most importantly, it's possible we might never get around to writing to all of those pages at all, in which case <code>calloc</code> + the kernel's sneaky trickery is a huge win!</p> <p>Of course, the exact set of optimizations <code>calloc</code> uses will vary depending on your environment. A neat trick that used to be popular was that the kernel would go around and speculatively zero out pages when the system was idle, so that they'd be fresh and ready when needed \u2013 but this is out of fashion on current systems. Tiny embedded systems without virtual memory obviously won't use virtual memory trickery. But in general, <code>calloc</code> is never worse than <code>malloc+memset</code>, and on mainstream systems it can do much better.</p> <p>One real life example is a recent bug in requests, where doing streaming downloads over HTTPS with a large receive block size was chewing up 100% CPU. It turns out that the problem was that when the user said they were willing to handle up to 100 MiB chunks at a time, then requests passed that on to pyopenssl, and then pyopenssl used <code>cffi.new</code> to allocate a 100 MiB buffer to hold the incoming data. But most of the time, there wasn't actually 100 MiB ready to read on the connection; so pyopenssl would allocate this large buffer, but then would only use a small part of it. Except... it turns out that <code>cffi.new</code> emulates calloc by doing malloc+memset, so they were paying to allocate and zero the whole buffer anyway. If <code>cffi.new</code> had used <code>calloc</code> instead, then the bug never would have happened! Hopefully they'll fix that soon.</p> <p>Or here's another example that comes up in numpy: suppose you want to make a big identity matrix, one with 16384 rows and 16384 columns. That requires allocating a buffer to hold 16384 * 16384 floating point numbers, and each float is 8 bytes, so that comes to 2 GiB of memory total.</p> <p>Before we create the matrix, our process is using 24 MiB of memory:</p> Text Only<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import resource\n&gt;&gt;&gt; # this way of fetching memory usage probably only works right on Linux:\n&gt;&gt;&gt; def mebibytes_used():\n...     return resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024\n...\n&gt;&gt;&gt; mebibytes_used()\n24.35546875\n</code></pre> <p>Then we allocate a 2 GiB dense matrix:</p> Text Only<pre><code>&gt;&gt;&gt; big_identity_matrix = np.eye(16384)\n&gt;&gt;&gt; big_identity_matrix\narray([[ 1.,  0.,  0., ...,  0.,  0.,  0.],\n       [ 0.,  1.,  0., ...,  0.,  0.,  0.],\n       [ 0.,  0.,  1., ...,  0.,  0.,  0.],\n       ...,\n       [ 0.,  0.,  0., ...,  1.,  0.,  0.],\n       [ 0.,  0.,  0., ...,  0.,  1.,  0.],\n       [ 0.,  0.,  0., ...,  0.,  0.,  1.]])\n&gt;&gt;&gt; big_identity_matrix.shape\n(16384, 16384)\n</code></pre> <p>How much memory is our process using now? The Answer May Surprise You (Learn This One Weird Trick To Slim Down Your Processes Now):</p> Text Only<pre><code>&gt;&gt;&gt; mebibytes_used()\n88.3515625\n</code></pre> <p>Numpy allocated the array using <code>calloc</code>, and then it wrote 1s in the diagonal... but most of the array is still zeros, so it isn't actually taking up any memory, and our 2 GiB matrix fits into ~60 MiB of actual RAM. Of course there are other ways to accomplish the same thing, like using a real sparse matrix library, but that's not the point. The point is that if you do something like this, <code>calloc</code> will magically make everything more efficient \u2013 and it's always at least as fast as the alternative.</p> <p>So basically, <code>calloc</code> exists because it lets the memory allocator and kernel engage in a sneaky conspiracy to make your code faster and use less memory. You should let it! Don't use <code>malloc+memset</code>!</p>"},{"location":"Blog/Why%20numbering%20should%20start%20at%20zero/","title":"Why numbering should start at zero","text":"<p>EWD831</p> <p>To denote the subsequence of natural numbers 2, 3, ..., 12 without the pernicious three dots, four conventions are open to us</p> a) 2 \u2264 i &lt; 13 b) 1 &lt; i \u2264 12 c) 2 \u2264 i \u2264 12 d) 1 &lt; i &lt; 13 <p>Are there reasons to prefer one convention to the other? Yes, there are. The observation that conventions a) and b) have the advantage that the difference between the bounds as mentioned equals the length of the subsequence is valid. So is the observation that, as a consequence, in either convention two subsequences are adjacent means that the upper bound of the one equals the lower bound of the other. Valid as these observations are, they don't enable us to choose between a) and b); so let us start afresh.</p> <p>There is a smallest natural number. Exclusion of the lower bound \u2014as in b) and d)\u2014 forces for a subsequence starting at the smallest natural number the lower bound as mentioned into the realm of the unnatural numbers. That is ugly, so for the lower bound we prefer the \u2264 as in a) and c). Consider now the subsequences starting at the smallest natural number: inclusion of the upper bound would then force the latter to be unnatural by the time the sequence has shrunk to the empty one. That is ugly, so for the upper bound we prefer &lt; as in a) and d). We conclude that convention a) is to be preferred.</p> <p>Remark The programming language Mesa, developed at Xerox PARC, has special notations for intervals of integers in all four conventions. Extensive experience with Mesa has shown that the use of the other three conventions has been a constant source of clumsiness and mistakes, and on account of that experience Mesa programmers are now strongly advised not to use the latter three available features. I mention this experimental evidence \u2014for what it is worth\u2014 because some people feel uncomfortable with conclusions that have not been confirmed in practice. (End of Remark.)</p> <p>*        * *</p> <p>When dealing with a sequence of length N, the elements of which we wish to distinguish by subscript, the next vexing question is what subscript value to assign to its starting element. Adhering to convention a) yields, when starting with subscript 1, the subscript range 1 \u2264 i &lt; N+1; starting with 0, however, gives the nicer range 0 \u2264  i &lt; N. So let us let our ordinals start at zero: an element's ordinal (subscript) equals the number of elements preceding it in the sequence. And the moral of the story is that we had better regard \u2014after all those centuries!\u2014 zero as a most natural number.</p> <p>Remark Many programming languages have been designed without due attention to this detail. In FORTRAN subscripts always start at 1; in ALGOL 60 and in PASCAL, convention c) has been adopted; the more recent SASL has fallen back on the FORTRAN convention: a sequence in SASL is at the same time a function on the positive integers. Pity! (End of Remark.)</p> <p>*        * *</p> <p>The above has been triggered by a recent incident, when, in an emotional outburst, one of my mathematical colleagues at the University \u2014not a computing scientist\u2014 accused a number of younger computing scientists of \"pedantry\" because \u2014as they do by habit\u2014 they started numbering at zero. He took consciously adopting the most sensible convention as a provocation. (Also the \"End of ...\" convention is viewed of as provocative; but the convention is useful: I know of a student who almost failed at an examination by the tacit assumption that the questions ended at the bottom of the first page.) I think Antony Jay is right when he states: \"In corporate religions as in others, the heretic must be cast out not because of the probability that he is wrong but because of the possibility that he is right.\"</p> Plataanstraat 5 5671 AL NUENEN The Netherlands 11 August 1982 prof.dr. Edsger W. Dijkstra Burroughs Research Fellow <p>Transcriber: Kevin Hely. Last revised on Fri, 2 May 2008.</p>"},{"location":"Blog/Writing%20a%20good%20paper/","title":"Writing a good paper","text":"<p>This article first appeared in ACM SIGOPS Operating Systems Review, Vol. 17, No. 3 (July, 1983), pages 35-40. Every effort has been made to keep the text in this document identical to that of the original article. The text in this file was scanned using OCR technology and has been carefully proofread, but some scanning errors may remain. This document is being made available with the permission of the authors.</p> <ul> <li>Writing a good paper</li> </ul>"},{"location":"Blog/Writing%20a%20good%20paper/#an-evaluation-of-the-ninth-sosp-submissions-or-how-and-how-not-to-write-a-good-systems-paper","title":"An Evaluation of the Ninth SOSP Submissions or How (and How Not) to Write a Good Systems Paper","text":""},{"location":"Blog/Writing%20a%20good%20paper/#roy-levin-and-david-d-redell-ninth-sosp-program-committee-co-chairmen","title":"Roy Levin and David D. Redell Ninth SOSP Program Committee Co-chairmen","text":""},{"location":"Blog/Writing%20a%20good%20paper/#introduction","title":"Introduction","text":"<p>On March 21, 1983, the program committee for the 9th Symposium on Operating System Principles, having read the eighty-three papers submitted, selected sixteen for presentation at the symposium. This acceptance ratio of about one in five approximates those of past SOSPs, although the number of submissions was somewhat lower than in recent years. Several members of the program committee found it surprisingly easy to separate the good papers from the bad ones; indeed, the ten committee members quickly agreed on the disposition of over 80% of the papers. As the acceptance ratio indicates, most of these were rejections.</p> <p>After the committee had completed its selection process, several members expressed disappointment in the overall quality of the submissions. Many of the rejected papers exhibited similar weaknesses, weaknesses that the committee felt should have been evident to the authors. In the hope of raising the quality of future SOSP submissions, and systems papers generally, the committee decided to describe the criteria used in evaluating the papers it received. This article combines the criteria used by all of the members of the committee, not just the authors.</p> <p>To try to avoid sounding preachy or pedagogic, we have cast this presentation in the first and second person and adopted a light, occasionally humorous style. Nevertheless, the intent is serious: to point out the common problems that appear repeatedly in technical papers in a way that will make it easier for future authors to avoid them. As you read this article, then, suppose yourself to be a prospective author for the 10th SOSP or for TOCS. You've done some work you would like to publish, so you sit down to write a paper. What questions should you be asking yourself as you write? These are also the questions that we, the reviewers of your paper, will be asking to determine its suitability for publication.</p>"},{"location":"Blog/Writing%20a%20good%20paper/#classes-of-papers","title":"Classes of Papers","text":"<p>Your paper will probably fall naturally into one of three categories:</p> <ul> <li>It presents a real system, either by a global survey of an entire system or by a selective examination of specific themes embodied in the system.</li> <li>It presents a system that is unimplemented but utilizes ideas or techniques that you feel the technical community should know.</li> <li>It addresses a topic in the theoretical areas, for example, performance modelling or security verification.</li> </ul> <p>Obviously, a single set of evaluation criteria cannot be applied uniformly across these categories; nevertheless, many criteria apply equally well to all three. As we describe each one below, we will try to emphasize the classes of papers to which it applies. Often it will be evident from context.</p>"},{"location":"Blog/Writing%20a%20good%20paper/#criteria-for-evaluation-of-submissions","title":"Criteria for Evaluation of Submissions","text":"<p>Original Ideas</p> <p>Are the ideas in the paper new? There is no point in submitting a paper to a conference or journal concerned with original work unless the paper contains at least one new idea.</p> <p>How do you know? You must be familiar with the state of the art and current research in the area covered by your paper in order to know that your work is original. Perhaps the most common failing among the submissions in the first category (real systems) was an absence of new ideas; the systems described were frequently isomorphic to one of a small number of pioneering systems well-documented in the literature.</p> <p>Can you state the new idea concisely? If your paper is to advance the state of knowledge, your reader must be able to find the new ideas and understand them. Try writing each idea down in a paragraph that someone generally versed in the relevant area can understand. If you can't, consider the possibility that you don't really understand the idea yourself. When you have the paragraphs, use them in the abstract for the paper.</p> <p>What exactly is the problem being solved? Your reader cannot be expected to guess the problem you faced given only a description of the solution. Be specific. Be sure to explain why your problem couldn't be solved just as well by previously published techniques.</p> <p>Are the ideas significant enough to justify a paper? Frequently, papers describing real systems contain one or two small enhancements of established techniques. The new idea(s) can be described in a few paragraphs; a twenty-page paper is unnecessary and often obscures the actual innovation. Since construction of a real system is a lot of work, the author of the paper sometimes unconsciously confuses the total effort with the work that is actually new. (\"My team worked on this system for two years and we're finally done. Let's tell the world how wonderful it is.\") If the innovation is small, a small paper or technical note in a suitable journal is more appropriate than an SOSP submission.</p> <p>Is the work described significantly different from existing related work? An obvious extension to a previously published algorithm, technique, or system, does not generally warrant publication. Of course, the label \"obvious\" must be applied carefully. (Remember the story of Columbus demonstrating how to make an egg stand on end (by gently crushing it): \"it's obvious once I've shown you how\".) You must show that your work represents a significant departure from the state of the art. If you can't, you should ask yourself why you are writing the paper and why anyone except your mother should want to read it.</p> <p>Is all related work referenced, and have you actually read the cited material? You will have difficulty convincing the skeptical reader of the originality of your efforts unless you specifically distinguish it from previously published work. This requires citation. Furthermore, you will find it harder to convince your reader of the superiority of your approach if he has read the cited works and you haven't.</p> <p>Are comparisons with previous work clear and explicit? You cannot simply say: \"Our approach differs somewhat from that adopted in the BagOfBits system [3].\" Be specific: \"Our virtual memory management approach uses magnetic media rather than punched paper tape as in the BagOfBits system [3], with the expected improvements in transfer rate and janitorial costs.\"</p> <p>Does the work comprise a significant extension, validation, or repudiation of earlier but unproven ideas? Implementation experiences supporting or contradicting a previously published paper design are extremely valuable and worthy candidates for publication. Designs are cheap, but implementations (particularly those based on unsound designs) are expensive.</p> <p>What is the oldest paper you referenced? The newest? Have you referenced similar work at another institution? Have you referenced technical reports, unpublished memoranda, personal communications? The answers to these questions help alert you to blind spots in your knowledge or understanding. Frequently, papers with only venerable references repeat recently published work of which the author is unaware. Papers with only recent references often \"rediscover\" (through ignorance) old ideas. Papers that cite only unpublished or unrefereed material tend to suffer from narrowness and parochialism. Remember that citations not only acknowledge a debt to others, but also serve as an abbreviation mechanism to spare your reader a complete development from first principles. If the reader needs to acquire some of that development, however, he must be able to convert your citations into source material he can read. Personal communications and internal memoranda fail this test. Technical reports are frequently published in limited quantities, out-of-print, and difficult to obtain. Consequently, such citations as source material should be avoided wherever possible.</p> <p>Reality</p> <p>Does the paper describe something that has actually been implemented? Quite a few of the SOSP submissions proceeded for fifteen pages in the present tense before revealing, in a concluding section (if at all), that the foregoing description was of a hypothetical system for which implementation was just beginning or being contemplated. This is unacceptable. Your reader has a right to know at the outset whether the system under discussion is real or not.</p> <p>If the system has been implemented, how has it been used, and what has this usage shown about the practical importance of the ideas? Once again, a multiple man-year implementation effort does not of itself justify publication of a paper. If the implemented system contains new ideas, it is important to explain how they worked out in practice. A seemingly good idea that didn't pan out is at least as interesting as one that did. It is important to be specific and precise. \"Our weather prediction system is up and running and no one has complained about its occasional inaccurate forecasts\" is much less convincing than \"everytime we fail to forecast rain, the users hang their wet shirts over the tape drives to dry\". In the latter case, at least we know that people are using and depending on the system.</p> <p>If the system hasn't been implemented, do the ideas justify publication now? This can be a difficult question for an author to answer dispassionately, yet any reviewer of the paper will make this judgment. It is always tempting to write a design paper describing a new system, then follow it up in a year or two with an \"experience\" paper. The successful papers of this genre nearly always include initial experience in the closing sections of the design paper. The subsequent experience paper then deals with the lessons learned from longer-term use of the system, frequently in unanticipated ways. Reviewers are very skeptical of design-only papers unless there are new ideas of obviously high quality.</p> <p>Lessons</p> <p>What have you learned from the work? If you didn't learn anything, it is a reasonable bet that your readers won't either, and you've simply wasted their time and a few trees by publishing your paper.</p> <p>What should the reader learn from the paper? Spell out the lessons clearly. Many people repeat the mistakes of history because they didn't understand the history book.</p> <p>How generally applicable are these lessons? Be sure to state clearly the assumptions on which your conclusions rest. Be careful of generalizations based on lack of knowledge or experience. A particularly common problem in \"real system\" papers is generalization from a single example, e.g., assuming that all file system directories are implemented by storing the directory in a single file and searching it linearly. When stating your conclusions, it helps to state the assumptions again. The reader may not have seen them for fifteen pages and may have forgotten them. You may have also.</p> <p>Choices</p> <p>What were the alternatives considered at various points, and why were the choices made the way they were? A good paper doesn't just describe, it explains. Telling your readers what you did doesn't give them any idea how carefully considered your choices were. You want to save future researchers from following the same blind alleys. You also want to record potentially interesting side-streets you didn't happen to explore. Make sure to state clearly which is which.</p> <p>Did the choices turn out to be right, and, if so, was it for the reasons that motivated them in the first place? If not, what lessons have you learned from the experience? How often have you found yourself saying \"this works, but for the wrong reason\"? Such a pronouncement represents wisdom (at least a small amount) that may benefit your reader. Many papers present a rational argument from initial assumptions all the way to the finished result when, in fact, the result was obtained by an entirely different path and the deductive argument fashioned later. This kind of \"revisionist history\" borders on dishonesty and prevents your readers from understanding how research really works.</p> <p>Context</p> <p>What are the assumptions on which the work is based? The skeptical reader is unlikely to accept your arguments unless their premises are stated. Make sure you get them all; it's easy to overlook implicit assumptions.</p> <p>Are they realistic? For \"unimplemented systems\" papers, this amounts to asking whether the assumptions of the design can hope to support a successful implementation. Many paper designs are naive about the real characteristics of components they treat abstractly, e.g., communication networks or humans typing on terminals. For theoretical studies, it must be clear how the assumptions reflect reality, e.g., failure modes in reliability modelling, classes of security threats in security verification, arrival distributions in queuing systems.</p> <p>How sensitive is the work to perturbations of these assumptions? If your result is delicately poised on a tall tower of fragile assumptions, it will be less useful to a reader than one that rests on a broader and firmer foundation.</p> <p>If a formal model is presented, does it give new information and insights? Simply defining a model for its own sake is not very useful. One deep theorem is worth a thousand definitions.</p> <p>Focus</p> <p>Does the introductory material contain excess baggage not needed for your main development? \"Real system\" papers are particularly guilty of irrelevant description. If your subject is distributed file systems, the physical characteristics of the connection between computer and communication network are probably not germane. Avoid the temptation to describe all major characteristics of your system at the same level of depth. Concentrate instead on the novel or unusual ones that (presumably) will be the focus of the original technical content of the paper.</p> <p>Do you include just enough material from previously published works to enable your reader to follow your thread of argument? Do not assume that the reader has read every referenced paper within the last week and has them at his fingertips for instant reference. If you want your reader to get past page three, avoid introductory sentences of the form \"We adopt the definition of transactions from Brown [4], layering it onto files as described by Green [7, 18], with the notions of record and database introduced by Black [10] and White [12] and later modified by Gray [6]\". On the other hand, don't burden your reader unnecessarily with lengthy extracts or paraphrases from cited works.</p> <p>Presentation</p> <p>Are the ideas organized and presented in a clear and logical way?</p> <p>Are terms defined before they are used?</p> <p>Are forward references kept to a minimum? Readers get annoyed when they repeatedly encounter statements like \"Each file consists of a sequence of items, which will be described in detail in a later section\". The reader has to remember the technical term \"item\", but the term has no semantics yet. It's all right to ask him to do this once or twice, but only when absolutely necessary. Even if you can't afford the digression to explain \"item\" at this point, give the reader enough information to attach some meaning to the term: \"Each file consists of a sequence of items, variable-sized, self-identifying bit sequences whose detailed interpretation will be discussed below under 'Multi-media Files'.\" Your reader may not yet understand your concept of files completely, but at least he has some glimpse of the direction in which you are leading him.</p> <p>Have alternate organizations been considered? Theoretical papers, particularly of a mathematical character, are generally easier to organize than papers describing systems. The expected sequence of definition, lemma, theorem, example, corollary works well for deductive argument, but poorly for description. In \"real system\" papers, much depends on the intent: global survey or selective treatment. Frequently, difficulties in organization result from the author's unwillingness to commit to either approach. Decide whether you are surveying your system or focusing on a specific aspect and structure the paper accordingly.</p> <p>Was an abstract written first? Does it communicate the important ideas of the paper? Abstracts in papers describing systems are sorely abused. The abstract is more often a prose table of contents than a precis of the technical content of the paper. It tends to come out something like this: \"A system based on Keysworth's conceptualization of user interaction [4] has been designed and implemented. Some preliminary results are presented and directions for future work considered.\" No reader skimming a journal is likely to keep reading after that. Avoid the passive voice (despite tradition) and include a simple statement of assumptions and results. \"We designed and implemented a user interface following the ideas of Keysworth and discovered that converting the space bar to a toe pedal increases typing speed by 15%. However, accuracy decreased dramatically when we piped rock music instead of Muzak (tm) into the office.\" Leave discussion and argument for the paper. It helps to write the abstract before the paper (despite tradition) and even the outline, since it focusses your attention on the main ideas you wants to convey.</p> <p>Is the paper finished? Reviewers can often help you to improve your paper, but they can't write it for you. Moreover, they can't be expected to interpolate in sections marked \"to be included in the final draft\". In a mathematical paper, a reviewer regards the statement of a theorem without proof with suspicion, and, if the theorem is intended to culminate prior development, with intolerance. Similarly, in a paper describing a system, a reviewer cannot tolerate the omission of important explanation or justification. Omitting sections with a promise to fill them in later is generally unacceptable.</p> <p>Writing Style</p> <p>Is the writing clear and concise?</p> <p>Are words spelled and used correctly?</p> <p>Are the sentences complete and grammatically correct?</p> <p>Are ambiguity, slang, and cuteness avoided?</p> <p>If you don't have sufficient concern for your material to correct errors in grammar, spelling, and usage before submitting it for publication, why should you expect a reviewer to read the paper carefully? Some reviewers feel that this kind of carelessness is unlikely to be confined to the presentation, and will reject the paper at the first inkling of technical incoherence. Remember that you are asking a favor of your reviewers: \"Please let me convince you that I have done interesting, publishable work.\" A reviewer is more favorably disposed toward you if he receives a clean, clear, carefully corrected manuscript than if it arrives on odd-sized paper after ten trips through a photocopier and looking like it was composed by a grade-school dropout. Even if you aren't particularly concerned with precise exposition, there is certain to be someone in your organization who is. Give your manuscript to this conscientious soul and heed the resulting suggestions.</p>"},{"location":"Blog/Writing%20a%20good%20paper/#summary","title":"Summary","text":"<p>These thirty-odd questions can help you write a better technical paper. Consult them often as you organize your presentation, write your first draft, and refine your manuscript into its final form. Some of these questions address specific problems in \"systems\" papers; others apply to technical papers in general. Writing a good paper is hard work, but you will be rewarded by a broader distribution and greater understanding of your ideas within the community of journal and proceedings readers.</p>"},{"location":"Collection/campus/","title":"Campus Capriccio","text":""},{"location":"Collection/campus/#campus-capriccio","title":"Campus Capriccio","text":"<p>While in class, you can think about basic things that are already clear. This knowledge is fun and enjoyable, why not revisit it? On the other hand, is there a better way to introduce it? Any relevant new questions? Can you give new life to this old knowledge? ...but if you do have a new idea, it's nice to see things from a new angle. Questions students ask can sometimes provide new directions for research. They often ask questions that I have thought about but gave up temporarily, but they are all very meaningful. It is also interesting to rethink these questions and see if we can make breakthroughs. Students don't necessarily understand the direction I want to answer, or the level I want to think about; but when they ask me this question, they often remind me of related issues. It is not easy to obtain this kind of revelation on your own. \u2014Richard Feynman</p> <p>I don't comment on teaching work or the like, but for one thing, I think the atmosphere of the computer department is not good. I'm an outsider, I can see clearly, and the senior who came to me mentioned this as I did. You will find that our students always like to brag about others and belittle themselves, which is the so-called 23 (laughs). The student took me as an example. The contestants gave everyone a question, and they all seemed to have no choice but to say that their ability was not enough. I hope everyone will not laugh at the water question. This creates a collective lack of self-confidence. Some classmates will think that those very good people say that they are not good, and their ability must be far worse. Or everyone usually likes to flatter each other, but when the final result comes out or some classmates fail, they stop talking. This is a very bad atmosphere. Everyone subconsciously denied themselves, and then naturally followed the mainstream direction, copying what others said, because he felt that his ability was not enough, or he dared not think about it.</p> <p>I have taught for so many years, and I can see the difference between the Department of Computer Science and other departments in this regard. In the data structure class for the whole school, many students communicated actively. Teacher Yin and I were very happy to answer the question this time, because there were eight students. Others will surely think, how can they be happy with so few students? Because we used to be able to come five or six to the department is not bad. I found that there are very few students like you in the Department of Computer Science, and few people actively communicate with each other. Everyone is doing their own thing. Therefore, there are not many people who can communicate in depth and candidly. And because of this kind of atmosphere, many people don't want to ask the teacher or others when they have questions in class or at other times. They will wonder if I will be despised by the god next door. This kind of mentality makes the communication between our departments not very sufficient. Of course, our teachers are also responsible.</p> <p>So I think everyone should pay attention to this issue. When I was in college, I was divided into a key class that is equivalent to today's. When I was in it, I found that many students in the class were busy with their own affairs, or in other words, there was not much communication. So now when the classmates get together, our relationship always seems to be not as close as the people in other ordinary classes. This is a gap. Once a classmate of mine drank too much and said to us, 'On the day of graduation, I knew that your class didn't have any relatives from our other classes, because we were going to go all over the world, and we were all crying. Most of you are guaranteed research.' Some things are experienced together and the relationship will last, but we just haven't experienced it, and there are too few sincere exchanges.</p>"},{"location":"Collection/shudaonan/","title":"\u8700\u9053\u96e3","text":""},{"location":"Collection/shudaonan/#_1","title":"\u8700\u9053\u96e3","text":"<p>\u8700\uff0c\u4f4d\u5c45\u4e2d\u570b\u4e4b\u897f\u5357\u908a\u9672\uff0c\u56db\u5883\u7686\u88ab\u5d07\u5c71\u5cfb\u5dba\u6240\u570d\u7e5e\uff0c\u4e2d\u9593\u4e00\u5927\u76c6\u5730\u3002\u5883\u5167\u820a\u6709\u5cb7\u3001\u7018\u3001\u96d2\u3001\u5df4\u56db\u5927\u6cb3\u6d41\uff0c\u6240\u4ee5\u53c8\u7a31\u56db\u5ddd\u3002 \uff08\u4e00\u8aaa\u5510\u528d\u5357\u9053\u50c5\u5206\u6771\u897f\u4e8c\u5ddd\uff0c\u81f3\u5b8b\u5247\u70ba\u76ca\u5dde\u8def\u3001\u6893\u5dde\u8def\u3001\u5229\u5dde\u8def\u3001\u5914\u5dde\u8def\uff0c\u8b02\u4e4b\u5ddd\u5cfd\u56db\u8def\uff0c\u5f8c\u9042\u4ee5\u6b64\u540d\u70ba\u56db\u5ddd\u3002\uff09</p> <p>\u8700\u8207\u4e2d\u539f\u7684\u4ea4\u901a\uff0c\u9678\u8def\u9808\u51fa\u79e6\u5ddd\uff08\u965d\u897f\uff09\uff0c\u5ddd\u965d\u4e4b\u9593\uff0c\u5cfb\u5dba\u9023\u96f2\uff0c\u5c71\u6df1\u5ca9\u5bc6\uff0c\u7d55\u7121\u901a\u8def\u3002\u7167\u674e\u767d\u8aaa\uff0c\u53ea\u6709\u965d\u897f\u90ff\u7e23\uff08\u4eca\u7709\u7e23\uff09\u592a\u767d\u5c71\u7684\u5c64\u5c64\u5cf0\u5dd2\u9593\uff0c\u624d\u6709\u4e00\u9053\u7f3a\u53e3\uff0c\u4e5f\u53ea\u6709\u98db\u9ce5\u53ef\u5ea6\uff0c\u800c\u4eba\u8de1\u4e0d\u81f3\uff1a</p> <p>\u566b\u5401\u56b1\uff0c\u5371\u4e4e\u9ad8\u54c9\uff01\u8700\u9053\u4e4b\u96e3\uff0c\u96e3\u65bc\u4e0a\u9752\u5929\uff01\u8836\u53e2\u53ca\u9b5a\u9ce7\uff0c\u958b\u570b\u4f55\u832b\u7136\u3002\u723e\u4f86\u56db\u842c\u516b\u5343\u6b72\uff0c\u4e0d\u8207\u79e6\u585e\u901a\u4eba\u7159\u3002\u897f\u7576\u592a\u767d\u6709\u9ce5\u9053\uff0c\u53ef\u4ee5\u6a6b\u7d55\u5ce8\u7709\u5dd4\u3002</p> <p>\u6625\u79cb\u6230\u570b\u6642\u4ee3\uff0c\u8700\u4eba\u59cb\u901a\u4e2d\u570b\u3002 \u300a\u83ef\u967d\u570b\u5fd7\u300b\u50b3\u8aaa\uff0c\u79e6\u60e0\u738b\u77e5\u8700\u738b\u597d\u8272\uff0c\u8a31\u5ac1\u4e94\u5973\u65bc\u8700\uff0c\u8700\u738b\u6d3e\u9063\u4e94\u4e01\u958b\u5c71\u5f80\u8fce\uff0c\u9084\u5230\u6893\u6f7c\uff0c\u898b\u4e00\u5927\u86c7\u884c\u5165\u5c71\u7a74\uff0c\u4e00\u4eba\u652c\u5176\u5c3e\u60f3\u8981\u62c9\u5b83\u51fa\u4f86\uff0c\u529b\u4e0d\u80fd\u52dd\uff0c\u65bc\u662f\uff0c\u4e94\u500b\u529b\u58eb\u4e00\u8d77\u4f86\u62c9\uff0c\u5927\u8072\u547c\u53eb\uff0c\u5c71\u5d29\u77f3\u88c2\u3002\u4e94\u4e01\u3001\u79e6\u4e94\u5973\u548c\u6240\u6709\u58eb\u5352\uff0c\u5168\u88ab\u5c71\u77f3\u58d3\u6b7b\u4e86\u2014\u2014\u6b63\u56e0\u70ba\u7576\u521d\u9019\u9805\u958b\u5c71\u5de5\u7a0b\uff0c\u4f7f\u4eba\u4e0d\u80fd\u76f8\u4fe1\u662f\u4eba\u529b\u6240\u80fd\u9054\u6210\u7684\u9b3c\u65a7\u795e\u5de5\uff0c\u6240\u4ee5\u624d\u6709\u9019\u985e\u4f3c\u795e\u8a71\u7684\u201c\u4e94\u4e01\u958b\u5c71\u201d\u7684\u50b3\u8aaa\u3002\u4f46\u8cf4\u4ee5\u901a\u8700\u7684\u5c71\u9593\u68e7\u9053\uff0c\u4e5f\u5f9e\u9019\u500b\u6642\u671f\u5c31\u508d\u5c71\u67b6\u6728\u5730\u5efa\u8d77\u4f86\u4e86\uff0c\u674e\u767d\u8a69\u8aaa\uff1a\u201c\u5730\u5d29\u5c71\u6467\u58ef\u58eb\u6b7b\uff0c\u7136\u5f8c\u5929\u68af\u77f3\u68e7\u76f8\u9264\u9023\u3002\u201d</p> <p>\u5929\u68af\u77f3\u68e7\u96d6\u7136\u662f\u67b6\u8d77\u4f86\u4e86\uff0c\u4f46\u662f\u9072\u81f3\u5510\u671d\u674e\u767d\u7684\u773c\u4e2d\uff0c\u8700\u9053\u4e4b\u96e3\uff0c\u4f9d\u7136\u96e3\u65bc\u767b\u5929\u3002\u9ec3\u9db4\u98db\u4e0d\u904e\u53bb\uff0c\u733f\u7334\u4e5f\u6101\u6500\u63f4\u4e0d\u4e0a\uff1b\u9752\u6ce5\u5dba\u61f8\u5d16\u842c\u4ede\uff0c\u6eff\u5c71\u96f2\u96e8\uff0c\u767e\u6b65\u4e5d\u6298\uff0c\u4e00\u8def\u6ce5\u6dd6\uff1b\u5c71\u6df1\u8655\uff0c\u666f\u8c61\u8085\u6bba\uff0c\u9ce5\u865f\u53e4\u6728\uff0c\u5b50\u898f\u591c\u557c\uff0c\u773c\u524d\u76e1\u662f\u7121\u7aae\u7684\u9023\u5cf0\u758a\u5d82\uff0c\u9ad8\u8207\u5929\u9f4a\uff0c\u67af\u677e\u5012\u639b\u7d55\u58c1\uff0c\u98db\u7011\u8f49\u77f3\u96f7\u9cf4\u3002\u674e\u767d\u5606\u9053\uff1a\u201c\u5176\u96aa\u4e5f\u5982\u6b64\uff0c\u55df\u723e\u9060\u9053\u4e4b\u4eba\u80e1\u70ba\u4e4e\u4f86\u54c9\uff01\u201d</p> <p>\u5d22\u5db8\u5d14\u5d6c\u7684\u528d\u9580\u95dc\uff0c\u8073\u7acb\u65bc\u5927\u5c0f\u528d\u5c71\u7684\u9023\u5cf0\u7d55\u58c1\u4e4b\u9593\uff0c\u98db\u95a3\u901a\u8862\uff0c\u7dbf\u4e99\u4e00\u767e\u591a\u516c\u91cc\u7684\u63d2\u5929\u5ced\u58c1\uff0c\u6709\u6240\u8b02\u201c\u4e00\u592b\u7576\u95dc\uff0c\u842c\u592b\u83ab\u958b\u201d\u7684\u5f62\u52e2\u3002\u9019\u5927\u81ea\u7136\u751f\u6210\u7684\u8981\u585e\uff0c\u5929\u4e0b\u5927\u4e82\u6642\uff0c\u537b\u6210\u70ba\u897f\u8700\u8cf4\u4ee5\u504f\u5b89\u7684\u5929\u96aa\u3002</p> <p>\u81ea\u53e4\u4ee5\u4f86\uff0c\u4ee3\u6709\u82f1\u96c4\u4eba\u7269\uff0c\u5728\u4e2d\u539f\u9019\u7247\u5927\u5730\u4e0a\uff0c\u9f8d\u6230\u5343\u5e74\uff0c\u6bba\u4eba\u76c8\u91ce\uff0c\u8700\u4eba\u5e78\u6709\u56db\u5883\u9ad8\u5c71\uff0c\u885b\u8b77\u4e2d\u9593\u9019\u4e00\u65b9\u5b89\u548c\u6a02\u571f\u3002\u80a5\u6c83\u7684\u6210\u90fd\u5e73\u539f\uff0c\u5f9e\u4e0d\u7f3a\u4e4f\u7ce7\u98df\uff0c\u7d21\u7e54\u696d\u975e\u5e38\u767c\u9054\uff0c\u9326\u6c5f\u6f84\u660e\u7684\u6c34\u6d41\uff0c\u6d17\u6fef\u51fa\u805e\u540d\u5929\u4e0b\u7684\u8700\u9326\uff0c\u5c71\u5d16\u548c\u9109\u91ce\u76db\u7522\u8336\u9e7d\uff0c\u7269\u7522\u5982\u6b64\u5bcc\u9952\uff0c\u4eba\u4eba\u90fd\u80fd\u8c50\u8863\u8db3\u98df\u3002\u7d93\u6fdf\u4e0a\u4e00\u6709\u81ea\u7d66\u7684\u6eff\u8db3\uff0c\u8700\u4eba\u96b1\u7136\u81ea\u8996\u70ba\u4e2d\u539f\u4ee5\u5916\u7684\u7368\u7acb\u738b\u570b\uff0c\u611b\u597d\u548c\u5e73\u548c\u81ea\u5df1\u7684\u9109\u571f\uff0c\u7121\u4eba\u9858\u610f\u80cc\u4e95\u96e2\u9109\uff0c\u5230\u964c\u751f\u5730\u65b9\u53bb\u95d6\u5929\u4e0b\u3002</p> <p>\u4e0d\u5e78\u7684\u662f\uff0c\u89d2\u9010\u4e2d\u539f\u3001\u958b\u7586\u62d3\u571f\u7684\u82f1\u96c4\u5011\uff0c\u4e0d\u662f\u96e3\u65bc\u767b\u5929\u7684\u8700\u9053\u3001\u842c\u592b\u83ab\u958b\u7684\u528d\u9580\u6240\u80fd\u963b\u64cb\u5f97\u4e86\u7684\u3002\u79e6\u6f22\u4e4b\u969b\uff0c\u5289\u90a6\u5c6f\u5175\u6f22\u4e2d\uff0c\u5c31\u66fe\u4ee5\u8072\u6771\u64ca\u897f\u7684\u8b00\u7565\uff0c\u201c\u660e\u4fee\u68e7\u9053\uff0c\u6697\u5ea6\u9673\u5009\u201d\u800c\u5f81\u670d\u4e86\u897f\u8700\uff1b\u4e09\u570b\u6642\u4ee3\uff0c\u8700\u6f22\u7684\u8af8\u845b\u4eae\uff0c\u5c31\u56e0\u70ba\u64da\u6709\u4e86\u5bcc\u9952\u7684\u56db\u5ddd\uff0c\u624d\u80fd\u516d\u51fa\u7941\u5c71\uff0c\u722d\u52dd\u5929\u4e0b\u3002</p> <p>\u5927\u5510\u9686\u76db\u4e4b\u4e16\uff0c\u7a81\u7136\u65bc\u5929\u5bf6\u5341\u56db\u8f09\u767c\u751f\u5b89\u53f2\u4e4b\u4e82\uff0c\u7384\u5b97\u88ab\u5b89\u797f\u5c71\u7684\u53db\u8ecd\u8ffd\u8feb\uff0c\u4e00\u8def\u897f\u5411\u9003\u4ea1\uff0c\u9014\u6b21\u99ac\u5d6c\u9a5b\uff0c\u5728\u5175\u8b8a\u7684\u8105\u8feb\u4e0b\uff0c\u5fcd\u75db\u8cdc\u6b7b\u694a\u8cb4\u5983\u5f8c\uff0c\u5c31\u5192\u96aa\u9032\u5165\u5c71\u5cb3\u91cd\u758a\u3001\u96f2\u7159\u842c\u91cc\u7684\u8700\u9053\uff0c\u800c\u897f\u72e9\u528d\u5357\u3002\u5f9e\u6b64\u4ee5\u5f8c\uff0c\u56db\u5ddd\u9019\u584a\u5b89\u548c\u6a02\u571f\uff0c\u4fbf\u88ab\u6372\u5165\u6642\u4e16\u7684\u6d6a\u6f6e\u4e2d\uff0c\u885d\u64ca\u52d5\u76ea\uff0c\u4e0d\u518d\u80fd\u5920\u4fdd\u6301\u50cf\u5f9e\u524d\u4e00\u6a23\u7684\u55ae\u7d14\u548c\u5be7\u975c\u4e86\u3002</p> <p>\u5b89\u53f2\u4e82\u5e73\u5f8c\uff0c\u5510\u671d\u5143\u6c23\u5927\u50b7\uff0c\u7d71\u6cbb\u529b\u91cf\u9010\u6f38\u8870\u9000\uff0c\u5168\u570b\u5404\u5730\uff0c\u76dc\u8cca\u8702\u8d77\uff0c\u51e1\u662f\u64c1\u6709\u6b66\u529b\u7684\u85e9\u93ae\uff0c\u83ab\u4e0d\u5272\u64da\u70ba\u96c4\uff0c\u5f37\u8005\u4e14\u5716\u554f\u9f0e\u4e2d\u539f\uff0c\u5929\u4e0b\u5927\u4e82\u3002\u5c62\u8a66\u4e0d\u7b2c\u7684\u9ec3\u5de2\u4e58\u6a5f\u79d8\u5bc6\u7d50\u793e\uff0c\u9020\u8d77\u53cd\u4f86\u3002\u9ec3\u5de2\u52e2\u529b\u8fc5\u901f\u81a8\u8139\uff0c\u653b\u9677\u6f7c\u95dc\u4e0d\u4e45\uff0c\u5c31\u4f54\u9818\u4e86\u9996\u90fd\u9577\u5b89\uff0c\u570b\u865f\u201c\u5927\u9f4a\u201d\uff0c\u81ea\u5df1\u505a\u8d77\u7687\u5e1d\u4f86\u4e86\u3002</p> <p>\u7576\u53db\u4e82\u7684\u70fd\u706b\u5ef6\u71d2\u5230\u4eac\u5e2b\uff0c\u5373\u5c07\u903c\u8fd1\u5bae\u9580\u6642\uff0c\u60f6\u6050\u4e2d\u7684\u50d6\u5b97\u7687\u5e1d\uff0c\u60f3\u8d77\u7384\u5b97\u66fe\u7d93\u5e78\u8700\uff0c\u8a8d\u70ba\u9019\u500b\u56db\u5883\u5d07\u5c71\u7684\u76c6\u5730\uff0c\u662f\u500b\u7406\u60f3\u7684\u907f\u96e3\u4e4b\u6240\uff0c\u65bc\u662f\u6c7a\u5b9a\u8eca\u99d5\u5165\u8700\u3002\u4e16\u4e82\u7684\u58d3\u8feb\uff0c\u4f7f\u8499\u5875\u7684\u5e1d\u5ba4\u3001\u843d\u9b44\u7684\u9577\u5b89\u8cb4\u65cf\u548c\u8cb4\u65cf\u9644\u5eb8\u7684\u6587\u5316\u4eba\uff0c\u90fd\u4e0d\u5f97\u4e0d\u8eab\u5411\u8271\u96e3\u7684\u8700\u9053\u6311\u6230\uff0c\u5927\u6279\u5927\u6279\u5730\u5230\u4e86\u56db\u5ddd\u3002</p> <p>\u9019\u6642\u5019\uff0c\u6709\u500b\u8ca9\u79c1\u9e7d\u3001\u76dc\u5bb6\u755c\uff0c\u4eba\u7a31\u201c\u8cca\u738b\u516b\u201d\u7684\u8349\u83bd\u82f1\u96c4\u738b\u5efa\uff0c\u8d81\u6b64\u6a5f\u6703\uff0c\u8d77\u5175\u52e4\u738b\uff0c\u4ee5\u8a0e\u4f10\u9ec3\u5de2\u70ba\u540d\uff0c\u885b\u8b77\u6d41\u4ea1\u4e2d\u7684\u50d6\u5b97\u7687\u5e1d\u9032\u4e86\u897f\u8700\u3002\u5f8c\u8ad6\u529f\u884c\u8cde\uff0c\u4fbf\u88ab\u4efb\u547d\u70ba\u8700\u4e2d\u67d0\u4e00\u5730\u65b9\u7684\u9577\u5b98\u3002\u738b\u5efa\u96d6\u662f\u8349\u83bd\u51fa\u8eab\uff0c\u537b\u9817\u5177\u6709\u96c4\u5fc3\uff0c\u5728\u9019\u500b\u5c0f\u5730\u76e4\u4e0a\uff0c\u7a4d\u6975\u64f4\u5145\u81ea\u5df1\u7684\u5be6\u529b\uff0c\u517c\u4f75\u5f31\u5c0f\uff0c\u5750\u5927\u52e2\u529b\uff0c\u5230\u5927\u5510\u5e1d\u570b\u7684\u547d\u904b\u7d42\u6b78\u6ec5\u4ea1\u6642\uff0c\u4ed6\u4fbf\u4f54\u9818\u6574\u500b\u56db\u5ddd\uff0c\u81ea\u5df1\u5efa\u8d77\u7368\u7acb\u738b\u570b\u4f86\u4e86\u2014\u2014\u662f\u70ba\u201c\u524d\u8700\u201d\uff0c\u6642\u7576\u516c\u5143907\u5e74\u3002</p> <p>\u674e\u767d\u5f62\u5bb9\u897f\u5317\u901a\u79e6\u5dde\u7684\u8700\u9053\uff0c\u6bd4\u767b\u5929\u9084\u96e3\uff0c\u800c\u6771\u5357\u5411\u53e6\u4e00\u689d\u767c\u6e90\u65bc\u5cb7\u5c71\u7684\u9577\u6c5f\u6c34\u7cfb\uff0c\u901a\u5f80\u6c5f\u5357\u7684\u6c34\u8def\uff0c\u4e5f\u4e26\u4e0d\u5bb9\u6613\u3002\u81ea\u5914\u5dde\u4ee5\u4e0b\uff0c\u5373\u662f\u4e00\u8def\u9023\u7e8c\u7684\u77bf\u5858\u5cfd\u3001\u5deb\u5cfd\u548c\u897f\u9675\u5cfd\u7684\u4e09\u5cfd\u4e4b\u96aa\uff0c\u5169\u5cb8\u4e00\u671b\u7121\u76e1\u7684\u5c64\u5dd2\u5ced\u58c1\uff0c\u5bc6\u593e\u6c5f\u6d41\uff0c\u6c34\u96a8\u5c71\u8f49\uff0c\u5c71\u58c1\u963b\u64cb\u6c34\u52e2\uff0c\u6fc0\u8d77\u842c\u9803\u98a8\u6ce2\uff0c\u6d36\u6e67\u640f\u9b25\uff0c\u9084\u6709\u4e00\u6bb5\u5d29\u5c71\u7684\u88c2\u77f3\uff0c\u6697\u85cf\u6c34\u4e2d\uff0c\u8ab0\u78b0\u8457\u5b83\uff0c\u7acb\u523b\u821f\u8986\u4eba\u4ea1\u3002\u9019\u4e00\u689d\u905e\u9577\u4e03\u767e\u91cc\u7684\u5cfd\u8def\uff0c\u540c\u6a23\u662f\u65c5\u4eba\u7684\u754f\u9014\u3002</p> <p>\u7136\u800c\u4e16\u4e0a\u7684\u4e8b\u60c5\uff0c\u6c92\u6709\u7d55\u5c0d\u7684\u5229\u5f0a\u3002\u627f\u5e73\u6642\u56fa\u7136\u4ea4\u901a\u4e0d\u4fbf\uff0c\u4f46\u7576\u5929\u4e0b\u52d5\u4e82\u7684\u6642\u5019\uff0c\u8700\u4e5f\u9760\u9019\u9ad8\u5c71\u548c\u6025\u6d41\uff0c\u6392\u9664\u4e86\u5916\u4f86\u798d\u5bb3\u7684\u6ce2\u53ca\uff0c\u5f97\u4ee5\u5728\u6bba\u8072\u9707\u5929\u3001\u54c0\u9d3b\u904d\u91ce\u7684\u4e2d\u539f\u4e4b\u5916\uff0c\u81ea\u6210\u4e16\u5916\u6843\u6e90\uff0c\u4f5c\u70ba\u907f\u96e3\u8005\u7684\u5929\u5802\u3002</p> <p>\u4e94\u4ee3\u5341\u570b\uff0c\u5be6\u662f\u5510\u4ee3\u85e9\u93ae\u4e4b\u798d\u7684\u5ef6\u7e8c\uff0c\u5927\u6c5f\u5357\u5317\u5404\u5730\uff0c\u5168\u7531\u7bc0\u93ae\u5272\u64da\uff0c\u5404\u81ea\u7368\u7acb\u7a31\u738b\uff0c\u5927\u5403\u5c0f\uff0c\u5f37\u51cc\u5f31\uff0c\u6b64\u5206\u5f7c\u5408\uff0c\u4ea4\u6230\u4e0d\u4f11\u3002\u5728\u9019\u500b\u6230\u4e82\u983b\u4ecd\u7684\u9ed1\u6697\u6642\u671f\u88e1\uff0c\u738b\u5efa\u6240\u7d71\u6cbb\u7684\u524d\u8700\uff0c\u6070\u662f\u4e00\u500b\u907a\u4e16\u7368\u7acb\uff0c\u6700\u5e73\u9756\u3001\u6700\u5b89\u8b10\u7684\u6a02\u571f\u3002\u4e2d\u539f\u5927\u6236\uff0c\u70ba\u4e86\u4fdd\u5168\u8eab\u5bb6\u6027\u547d\uff0c\u5be7\u9858\u5192\u8457\u8700\u9053\u7684\u96aa\u96e3\uff0c\u642c\u5230\u56db\u5ddd\u4f86\u5bc4\u5bd3\uff0c\u5e36\u4f86\u591a\u5e74\u7a4d\u5132\u7684\u8ca1\u5bcc\u548c\u6b77\u4e16\u6536\u85cf\u7684\u6587\u7269\u3002\u738b\u5efa\u96d6\u7136\u662f\u7c97\u4eba\uff0c\u4f46\u4ed6\u61c2\u5f97\u5229\u7528\u9019\u500b\u6a5f\u6703\uff0c\u512a\u8207\u5bb9\u7d0d\u9019\u6279\u5916\u4f86\u7684\u9ad8\u7d1a\u96e3\u6c11\uff0c\u4ed6\u5011\u5e36\u4f86\u7684\u5927\u6279\u91d1\u5e1b\u548c\u7269\u8cc7\uff0c\u5145\u5be6\u4e86\u897f\u8700\u7684\u5730\u65b9\u8ca1\u529b\uff0c\u4f7f\u5b83\u610f\u5916\u8fc5\u901f\u5730\u7e41\u69ae\u4e86\u8d77\u4f86\u3002\u907f\u96e3\u5165\u8700\u7684\u820a\u5b98\u50da\u548c\u5931\u53bb\u5bc4\u8a17\u7684\u6587\u5316\u4eba\u3001\u85dd\u8853\u5bb6\u3001\u8a69\u4eba\u751a\u81f3\u79aa\u50e7\uff0c\u4e00\u4f8b\u53d7\u5230\u738b\u5efa\u7684\u512a\u9047\uff0c\u9019\u4e9b\u4eba\u539f\u4f86\u90fd\u662f\u4e2d\u539f\u4e0a\u5c64\u793e\u6703\u88e1\u7684\u4e2d\u5805\u5206\u5b50\uff0c\u4ed6\u5011\u5c07\u5510\u4ee3\u6700\u6210\u719f\u6700\u9ad8\u7b49\u7684\u9577\u5b89\u6587\u5316\u5e36\u9032\u897f\u8700\u4f86\uff0c\u65bc\u662f\u4e2d\u539f\u7684\u751f\u6d3b\u98a8\u7fd2\u3001\u79ae\u6a02\u6587\u7269\uff0c\u5ee3\u88ab\u8700\u4eba\u5438\u6536\uff0c\u5230\u4e2d\u539f\u793e\u6703\u88ab\u6578\u5341\u5e74\u9593\u7121\u60c5\u7684\u6230\u706b\u6467\u6bc0\u6b86\u76e1\u6642\uff0c\u53cd\u5012\u8981\u8700\u5883\u5167\u6240\u4fdd\u5b58\u7684\u50b3\u7d71\u6587\u5316\u4f86\u53cd\u994b\u4e2d\u539f\u4e86\u3002</p> <p>\u738b\u5efa\u7684\u524d\u8700\uff0c\u6b77\u4e8c\u4e3b\uff0c\u4e8c\u5341\u4e09\u5e74\uff0c\u88ab\u4e2d\u539f\u570b\u5bb6\u7684\u5f8c\u5510\u6240\u6ec5\uff0c\u4f46\u53c8\u906d\u5f8c\u5510\u59d4\u6d3e\u6cbb\u8700\u7684\u8ecd\u4eba\u5b5f\u77e5\u7965\u53db\u96e2\u800c\u7368\u7acb\uff0c\u662f\u70ba\u201c\u5f8c\u8700\u201d\uff0c\u5f8c\u8700\u4ea6\u6b77\u4e8c\u4e3b\uff0c\u4e09\u5341\u4e09\u5e74\u3002</p> <p>\u524d\u5f8c\u8700\u8fd1\u516d\u5341\u5e74\u9593\uff0c\u738b\u3001\u5b5f\u5169\u5bb6\u7684\u7d71\u6cbb\uff0c\u8a85\u6c42\u7b97\u4e0d\u5f97\u5341\u5206\u82db\u9177\uff0c\u4ee5\u5343\u842c\u4eba\u7684\u8840\u6c57\u5949\u4e8b\u4e00\u5bb6\u4e00\u59d3\u800c\u5df2\u3002\u53ea\u8981\u6c92\u6709\u6230\u722d\uff0c\u6c92\u6709\u793e\u6703\u52d5\u4e82\uff0c\u9019\u4e00\u6bb5\u4e2d\u570b\u6b77\u53f2\u4e0a\u76f8\u7576\u9ed1\u6697\u7684\u6642\u671f\u4e2d\uff0c\u4e5f\u53ea\u6709\u897f\u8700\u7368\u80fd\u4fdd\u6301\u4e00\u500b\u5e73\u7a69\u7684\u6642\u4e16\u3002</p> <p>\u9019\u6bb5\u7368\u7acb\u6642\u671f\uff0c\u56db\u5ddd\u751f\u7522\u7684\u7269\u8cea\uff0c\u4e00\u7d72\u4e00\u7c92\u90fd\u4e0d\u5fc5\u8f38\u9001\u4e2d\u592e\uff0c\u7121\u6578\u91d1\u5e1b\u548c\u73cd\u5bf6\u96d6\u7136\u7a4d\u805a\u65bc\u8700\u5bae\uff0c\u4f46\u7e3d\u9084\u7b97\u662f\u8700\u5883\u5167\u7684\u85cf\u5bcc\u3002\u8700\u5bae\u7684\u751f\u6d3b\u7121\u8ad6\u600e\u9ebc\u8c6a\u5962\uff0c\u751a\u81f3\u8352\u5510\u5230\u9023\u6eba\u5668\u90fd\u7528\u9ec3\u91d1\u9444\u9020\uff0c\u4e03\u5bf6\u9472\u5d4c\u3002\u7136\u800c\u4e00\u4eba\u4e4b\u5949\uff0c\u7562\u7adf\u6709\u9650\uff0c\u8001\u767e\u59d3\u5fcd\u8fb1\u8ca0\u91cd\u6163\u4e86\uff0c\u751f\u6d3b\u617e\u671b\u975e\u5e38\u4f4e\u5fae\uff0c\u53ea\u8981\u65e5\u5b50\u904e\u5f97\u5e73\u5b89\uff0c\u8fb2\u4eba\u80fd\u5b89\u5206\u5b88\u5df1\u5730\u8015\u4f5c\u7530\u91ce\uff0c\u5546\u4eba\u80fd\u9806\u9806\u5679\u5679\u505a\u751f\u610f\uff0c\u4ed6\u5011\u5c31\u53ef\u4ee5\u5f9e\u7bc0\u5109\u4e2d\u904e\u4ed6\u5011\u5351\u5fae\u7684\u751f\u6d3b\uff0c\u5f9e\u5351\u5fae\u7684\u751f\u6d3b\u4e2d\u7372\u5f97\u6eff\u8db3\u3002</p>"},{"location":"Collection/songzhipingshu/","title":"\u5b8b\u4e4b\u5e73\u8700","text":""},{"location":"Collection/songzhipingshu/#_1","title":"\u5b8b\u4e4b\u5e73\u8700","text":"<p>\u5b8b\u592a\u7956\u4ee5\u9673\u6a4b\u9a5b\u5175\u8b8a\uff0c\u800c\u9ec3\u888d\u52a0\u8eab\uff0c\u5f97\u6709\u5929\u4e0b\uff0c\u4e5f\u56e0\u6b64\u89ba\u5bdf\u5230\u8ecd\u4eba\u64cd\u653f\u7684\u5371\u96aa\uff0c\u96a8\u5f8c\u5c31\u6709\u201c\u676f\u9152\u91cb\u5175\u6b0a\u201d\u90a3\u6a23\u6232\u5287\u6027\u7684\u6210\u529f\u3002\u5f85\u5230\u4e2d\u592e\u653f\u6cbb\u90e8\u7f72\u7a0d\u6709\u982d\u7dd2\uff0c\u4ed6\u5c31\u5206\u5175\u9010\u4e00\u6536\u62fe\u5357\u65b9\u8af8\u570b\uff0c\u5148\u5e73\u834a\u5357\uff0c\u6b21\u5e73\u8700\uff0c\u518d\u6b21\u5357\u6f22\u548c\u5357\u5510\uff08\u6642\u8cb6\u865f\u6c5f\u5357\uff09\uff0c\u6f38\u6b21\u6549\u5e73\uff0c\u7d71\u4e00\u4e2d\u570b\u3002</p> <p>\u5e73\u8700\u6230\u4e8b\uff0c\u767c\u52d5\u65bc\u592a\u7956\u4e7e\u5fb7\u4e8c\u5e74\uff08964\uff09\uff0c\u4ee5\u738b\u5168\u658c\u70ba\u897f\u5ddd\u884c\u71df\u90fd\u90e8\u7f72\uff0c\u5289\u5149\u7fa9\u3001\u5d14\u5f65\u9032\u70ba\u526f\uff0c\u5c07\u6b65\u9a0e\u516d\u842c\uff0c\u5206\u7531\u9cf3\u5dde\u3001\u6b78\u5dde\u5169\u8def\u8d70\u68e7\u9053\u548c\u63da\u5b50\u6c5f\u4e09\u5cfd\u4e4b\u96aa\uff0c\u9032\u8ecd\u897f\u8700\u3002</p> <p>\u8700\u738b\u5b5f\u6636\u4fe1\u7528\u8fd1\u81e3\u738b\u662d\u9060\u3001\u97d3\u4fdd\u6b63\u8f29\u7d20\u4e0d\u77e5\u5175\u7684\u4eba\u7d71\u8ecd\u79a6\u6575\uff0c\u5176\u6557\u4ea1\u7684\u547d\u904b\uff0c\u4e0d\u535c\u53ef\u77e5\u3002\u528d\u9580\u95dc\u5929\u96aa\u4e00\u5931\uff0c\u8700\u4e3b\u60f6\u99ed\u7121\u8a08\uff0c\u4f46\u8a00\uff1a\u201c\u543e\u7236\u5b50\u4ee5\u8c50\u8863\u7f8e\u98df\u990a\u58eb\u56db\u5341\u5e74\uff0c\u53ca\u9047\u6545\uff0c\u4e0d\u80fd\u70ba\u543e\u6771\u5411\u767c\u4e00\u77e2\uff01\u201d\u7d42\u81f3\u7121\u5175\u53ef\u7528\uff0c\u53ea\u5f97\u4fee\u8868\u6295\u964d\u3002\u5b8b\u8ecd\u81ea\u6c74\u4eac\u767c\u5175\uff0c\u5230\u63a5\u53d7\u5b5f\u6636\u6295\u964d\uff0c\u524d\u5f8c\u53ea\u8cbb\u516d\u5341\u516d\u5929\uff0c\u5f97\u5dde\u56db\u5341\u4e94\uff0c\u7e23\u4e00\u767e\u4e5d\u5341\u516b\u3002</p> <p>\u5b8b\u70ba\u5fb9\u5e95\u77ef\u6b63\u524d\u4ee3\u85e9\u93ae\u7684\u5f0a\u5bb3\uff0c\u63a1\u53d6\u7d55\u5c0d\u7684\u4e2d\u592e\u96c6\u6b0a\u5236\uff0c\u4e0d\u4f7f\u5730\u65b9\u638c\u63e1\u5175\u529b\uff0c\u4e0d\u4f7f\u5730\u65b9\u7559\u5b58\u9918\u8ca1\uff0c\u6240\u4ee5\u4e00\u7d93\u5f81\u670d\u897f\u8700\uff0c\u9996\u5148\u5373\u5c07\u8700\u5bae\u4e2d\u6eff\u5eab\u7684\u91d1\u5e1b\u73cd\u5bf6\uff0c\u5168\u90e8\u6c92\u6536\uff0c\u7279\u5225\u7de8\u7d44\u4e00\u500b\u8f38\u9001\u968a\uff0c\u4e00\u8eca\u4e00\u8eca\u5730\u8f09\u96e2\u8700\u571f\uff0c\u8f38\u5f80\u6c74\u4eac\u3002\u9019\u5927\u6279\u7684\u8cc7\u8ca1\uff0c\u56fa\u7136\u662f\u53d6\u4e4b\u65bc\u8700\u5bae\u5167\u5eab\uff0c\u4f46\u4e5f\u662f\u516d\u4e03\u5341\u5e74\u9593\u5f9e\u56db\u5ddd\u8001\u767e\u59d3\u982d\u4e0a\u641c\u62ec\u4f86\u7684\u5730\u65b9\u8ca1\u5bcc\uff0c\u8700\u4eba\u773c\u770b\u5b83\u5011\u904b\u96e2\u672c\u571f\uff0c\u4e0d\u80fd\u6c92\u6709\u88ab\u5f81\u670d\u7684\u5c48\u8fb1\u548c\u61a4\u6012\u3002</p> <p>\u52dd\u5229\u7684\u5c07\u8ecd\u5011\uff0c\u66f4\u64fa\u51fa\u4e00\u526f\u5f81\u670d\u8005\u70ba\u6240\u6b32\u70ba\u7684\u59ff\u614b\uff0c\u4ed6\u5011\u5728\u6210\u90fd\uff0c\u6574\u65e5\u6574\u591c\u5730\u8209\u884c\u76db\u5927\u5bb4\u6703\uff0c\u5fb5\u6b4c\u9078\u8272\uff0c\u7e31\u9152\u72c2\u6b61\uff0c\u6beb\u7121\u9867\u5fcc\u5730\u653e\u6d6a\u8072\u8272\uff0c\u518d\u4e5f\u4e0d\u7ba1\u8ecd\u52d9\uff0c\u4efb\u4ee4\u90e8\u4e0b\u6436\u63a0\u8ca1\u7269\uff0c\u9738\u5360\u5a66\u5973\u3002\u8700\u4eba\u5c48\u670d\u5728\u5b8b\u8ecd\u7684\u6deb\u5a01\u4e0b\uff0c\u7a4d\u61a4\u96e3\u5e73\u3002\u66f9\u5f6c\u5c62\u8acb\u4e3b\u5e25\u738b\u5168\u658c\u73ed\u5e2b\u56de\u4eac\uff0c\u800c\u5168\u658c\u7b49\u5247\u8caa\u6200\u6210\u90fd\u7684\u4eab\u53d7\uff0c\u4e0d\u4e88\u7406\u6703\u3002\u5510\u4ee3\u6709\u201c\u63da\u4e00\u76ca\u4e8c\u201d\u7684\u8aaa\u6cd5\uff0c\u8a8d\u70ba\u5168\u570b\u57ce\u5e02\u7684\u7e41\u69ae\uff0c\u63da\u5dde\u70ba\u5929\u4e0b\u7b2c\u4e00\uff0c\u76ca\u5dde\uff08\u6210\u90fd\uff09\u7b2c\u4e8c\uff0c\u6240\u4ee5\u9019\u6279\u5c07\u8ecd\u5011\u5c31\u6a02\u4e0d\u601d\u6b78\u4e86\u3002</p> <p>\u7687\u5e1d\u4e0b\u8a54\u8abf\u9063\u8700\u5175\u8d74\u4eac\uff0c\u9019\u662f\u9810\u9632\u8700\u4eba\u4f5c\u4e82\u7684\u91dc\u5e95\u62bd\u85aa\u4e4b\u8a08\uff0c\u7136\u800c\u8700\u5175\u8c48\u80fd\u7518\u5fc3\u96e2\u9109\u80cc\u4e95\uff0c\u4efb\u4eba\u64fa\u4f48\u3002\u738b\u5168\u658c\u53c8\u4e0d\u77e5\u8f15\u91cd\uff0c\u65e2\u5df2\u7e31\u4ee4\u90e8\u66f2\u5c0d\u8700\u5175\u767e\u822c\u4fb5\u51cc\uff0c\u53c8\u524b\u6263\u4ed6\u5011\u7684\u884c\u88dd\u65c5\u8cbb\uff0c\u9019\u4e9b\u571f\u8457\u5175\u58eb\u5c31\u6eff\u61f7\u6028\u61a4\uff0c\u5bc6\u8b00\u53cd\u53db\u3002</p> <p>\u4e7e\u5fb7\u4e09\u5e74\u4e09\u6708\uff0c\u8ecd\u884c\u81f3\u7dbf\u5dde\uff0c\u4ed6\u5011\u5c31\u516c\u958b\u9020\u8d77\u53cd\u4f86\u4e86\uff0c\u6436\u596a\u7dbf\u5dde\u9644\u8fd1\u7684\u57ce\u9091\uff0c\u865f\u53ec\u6c11\u773e\uff0c\u4e00\u6642\u96c6\u805a\u8005\u9054\u5341\u9918\u842c\u4eba\uff0c\u81ea\u865f\u201c\u8208\u570b\u8ecd\u201d\uff0c\u63a8\u8209\u8700\u6587\u5dde\u7684\u523a\u53f2\u5168\u5e2b\u96c4\u70ba\u7d71\u5e25\uff0c\u7387\u773e\u653b\u5f6d\u5dde\u3002\u5168\u5e2b\u96c4\u81ea\u7a31\u201c\u8208\u570b\u5927\u738b\u201d\uff0c\u958b\u5e55\u5e9c\uff0c\u8a2d\u5b98\u7f6e\u7f72\uff0c\u6d3e\u7bc0\u5e25\u4e8c\u5341\u9918\u4eba\uff0c\u5206\u64da\u8981\u5bb3\uff0c\u5169\u5ddd\u7684\u8001\u767e\u59d3\u7fa4\u8d77\u9644\u548c\uff0c\u8072\u52e2\u65e5\u76db\u3002\u738b\u5168\u658c\u6d3e\u5175\u9032\u527f\uff0c\u5c62\u5c62\u843d\u6557\uff0c\u5e2b\u96c4\u63da\u8a00\u8981\u53cd\u653b\u6210\u90fd\uff0c\u909b\u3001\u8700\u3001\u7709\u3001\u96c5\u3001\u679c\u3001\u9042\u3001\u6e1d\u3001\u5408\u3001\u8cc7\u3001\u7c21\u7b49\u5341\u516d\u5dde\u53ca\u6210\u90fd\u5c6c\u9109\u90fd\u7d1b\u7d1b\u8d77\u5175\u97ff\u61c9\uff0c\u8700\u4eba\u6297\u5b8b\u7684\u6b66\u88dd\u9769\u547d\uff0c\u4e00\u6642\u5982\u706b\u5982\u837c\u3002</p> <p>\u5176\u6642\uff0c\u6210\u90fd\u57ce\u88e1\u9084\u5269\u6709\u9063\u9918\u7684\u8700\u5175\u4e8c\u842c\u4e03\u5343\u4eba\uff0c\u5168\u658c\u6015\u4ed6\u5011\u6703\u88e1\u61c9\u5916\u5408\uff0c\u8207\u90e8\u5c07\u5408\u8b00\uff0c\u5c07\u4ed6\u5011\u9a19\u5165\u593e\u57ce\u4e2d\uff0c\u4e00\u8d77\u6bba\u4e86\u3002\u9019\u7a2e\u6bba\u622e\u964d\u5352\u7684\u66b4\u884c\uff0c\u66f4\u4ee4\u8700\u4eba\u9aee\u6307\u3002</p> <p>\u5b8b\u592a\u7956\u5f97\u77e5\u8700\u4e82\uff0c\u7acb\u5373\u6d3e\u9063\u5927\u8ecd\u589e\u63f4\uff0c\u8cbb\u4e0a\u4e00\u5e74\u6642\u9593\uff0c\u514d\u4e0d\u6389\u53c8\u4e00\u5834\u8840\u8165\u7684\u5c60\u6bba\uff0c\u624d\u544a\u6549\u5e73\u3002</p> <p>\u8b8a\u4e82\u56fa\u7136\u5f97\u4ee5\u7d55\u5c0d\u512a\u52e2\u7684\u8ecd\u4e8b\u529b\u91cf\u52a0\u4ee5\u6d88\u6ec5\uff0c\u4f46\u662f\uff0c\u5b8b\u592a\u7956\u7684\u4e2d\u592e\u653f\u6b0a\uff0c\u537b\u4e5f\u5f9e\u6b64\u5931\u6389\u4e86\u897f\u8700\u7684\u6c11\u5fc3\u3002</p> <p>\u5b8b\u671d\u7d71\u6cbb\u4e0b\u7684\u5b50\u6c11\uff0c\u8ca0\u64d4\u662f\u975e\u5e38\u6c89\u91cd\u7684\u3002\u6b63\u5e38\u7684\u8ce6\u7a05\u4e4b\u5916\uff0c\u6709\u5404\u7a2e\u540d\u76ee\u9644\u52a0\u7684\u82db\u6350\u96dc\u7a05\uff0c\u6bcf\u500b\u4eba\u982d\u4e0a\u90fd\u9808\u64d4\u8ca0\u8eab\u4e01\u9322\uff0c\u53e6\u5916\u9084\u6709\u5fad\u5f79\u548c\u6524\u6d3e\uff0c\u8fb2\u6c11\u7d42\u5e74\u8015\u7a3c\uff0c\u9084\u5f97\u4e0d\u5230\u4e00\u500b\u6eab\u98fd\u3002\u524d\u5f8c\u8700\u6642\u4ee3\uff0c\u8001\u767e\u59d3\u7e73\u4ed8\u7684\u6350\u7a05\uff0c\u7e3d\u7b97\u53d6\u4e4b\u65bc\u8700\uff0c\u7528\u4e4b\u65bc\u8700\u3002\u73fe\u5728\u5247\u5b8c\u5168\u7d0d\u5165\u5b8b\u671d\u4e2d\u592e\u6b72\u5165\u7cfb\u7d71\u88e1\u53bb\uff0c\u8700\u4eba\u4e0d\u518d\u5f97\u5230\u5206\u6f64\uff0c\u9019\u548c\u521d\u5e73\u897f\u8700\u6642\uff0c\u5c07\u5b5f\u6c0f\u5eab\u85cf\u6089\u6578\u8f38\u5f80\u4eac\u5e2b\uff0c\u540c\u6a23\u523a\u6fc0\u8700\u4eba\u3002</p> <p>\u66f4\u751a\u8005\uff0c\u5b8b\u5728\u897f\u8700\u5be6\u65bd\u5c08\u8ce3\u5236\u5ea6\uff0c\u56db\u5ddd\u91cd\u8981\u7684\u51fa\u7522\uff0c\u5982\u8336\u3001\u99ac\u3001\u9e7d\uff0c\u90fd\u7531\u653f\u5e9c\u5b9a\u50f9\u6536\u8cfc\uff0c\u4eba\u6c11\u4e0d\u5f97\u81ea\u7531\u8cb7\u8ce3\u3002\u4eca\u5929\u4ee5\u5341\u5343\u8cb7\u9032\uff0c\u660e\u65e5\u5373\u4ee5\u5341\u4e09\u5343\u8ce3\u51fa\uff0c\u201c\u6bd4\u81f3\u6b72\u7d42\uff0c\u6536\u76ca\u4e0d\u53ef\u52dd\u7b97\uff0c\u8c48\u6b62\u4e09\u5206\u800c\u5df2\u201d\u3002\u800c\u4e14\u5929\u4e0b\u8336\u6cd5\u7686\u901a\uff0c\u53ea\u6709\u8700\u4e2d\u7368\u884c\u201c\u7981\u69b7\u201d\uff08\u5c08\u8ce3\uff09\uff0c\u8336\u8fb2\u9e7d\u6c11\u548c\u990a\u99ac\u6236\u6240\u906d\u53d7\u7684\u525d\u524a\uff0c\u4e00\u6a23\u82db\u9177\uff0c\u5e7e\u4e4e\u7121\u4ee5\u5b58\u6d3b\u3002\u4e0d\u4f46\u5982\u6b64\uff0c\u751a\u81f3\u5982\u7576\u5730\u540d\u7522\u201c\u8700\u9326\u201d\uff0c\u4e5f\u7531\u653f\u5e9c\u8a2d\u7f6e\u5c08\u9580\u6a5f\u69cb\uff0c\u7d71\u5236\u7522\u92b7\uff0c\u64f4\u800c\u81f3\u65bc\u6240\u6709\u7e54\u7269\uff0c\u90fd\u7981\u6b62\u4eba\u6c11\u81ea\u7531\u8cb7\u8ce3\u3002\u671d\u5ef7\u6240\u6d3e\u5b98\u540f\u5c07\u5730\u65b9\u5bcc\u6e90\u4e00\u624b\u652b\u76e1\uff0c\u5be6\u65bd\u5982\u6b64\u7d55\u5c0d\u7684\u7d93\u6fdf\u58d3\u69a8\u653f\u7b56\uff0c\u897f\u8700\u8001\u767e\u59d3\u7684\u751f\u5b58\u6a5f\u6703\u5df2\u906d\u56b4\u91cd\u5a01\u8105\uff0c\u600e\u80fd\u4e0d\u5c0d\u5b8b\u671d\u62b1\u8457\u975e\u5e38\u5f37\u70c8\u7684\u53cd\u611f\uff1f</p> <p>\u5b98\u54e1\u5229\u7528\u5730\u65b9\u8c6a\u5f37\u3001\u571f\u9738\u52a0\u5f37\u4ed6\u5011\u7684\u7d71\u6cbb\uff0c\u6240\u4ee5\u53ea\u6709\u8c6a\u5f37\u571f\u9738\u624d\u80fd\u52fe\u7d50\u5b98\u5e9c\uff0c\u7cf6\u8ce4\u8ca9\u8ce3\uff0c\u6295\u6a5f\u53d6\u5229\uff0c\u9019\u7a2e\u9738\u5360\u6027\u7684\u525d\u524a\u8207\u4fb5\u6b0a\uff0c\u6df1\u523b\u5230\u4ee4\u4eba\u96e3\u4ee5\u7f6e\u4fe1\u7684\u5730\u6b65\uff0c\u4e26\u4e14\u56e0\u6b64\u5f62\u6210\u793e\u6703\u4e0a\u8ca7\u5bcc\u4e0d\u5747\u4e4b\u5c16\u92b3\u5c0d\u7acb\uff0c\u9019\u4e00\u80a1\u6028\u6068\uff0c\u7576\u7136\u53c8\u6b78\u7d50\u5230\u653f\u5e9c\u982d\u4e0a\u3002</p> <p>\u5b8b\u671d\u6a6b\u66b4\u7684\u6b66\u529b\u7d71\u6cbb\u548c\u82db\u9177\u7684\u7d93\u6fdf\u58d3\u69a8\uff0c\u4ea4\u76f8\u70ba\u7528\uff0c\u4f7f\u897f\u8700\u7684\u8001\u767e\u59d3\u56f0\u82e6\u4e0d\u582a\u3002\u5e73\u8700\u5f8c\u4e09\u5341\u5e74\uff0c\u5373\u5b8b\u592a\u5b97\u6df3\u5316\u56db\u5e74\uff08993\uff09\u6625\uff0c\u7d42\u65bc\u767c\u751f\u4e86\u4ee5\u738b\u5c0f\u6ce2\u3001\u674e\u9806\u70ba\u9996\u7684\u6b66\u529b\u53cd\u6297\u3002</p> <p>\u5b8b\u4eba\u738b\u95e2\u4e4b\u7684\u300a\u6fa0\u6c34\u71d5\u8ac7\u9304\u300b\u8a18\u6b64\u8d77\u7fa9\u7684\u7de3\u7531\uff0c\u975e\u5e38\u627c\u8981\uff1a</p> <p>\u672c\u671d\u738b\u5c0f\u6ce2\u3001\u674e\u9806\u3001\u738b\u5747\u8f29\u562f\u805a\u897f\u8700\uff0c\u84cb\u671d\u5ef7\u521d\u5e73\u5b5f\u6c0f\uff0c\u8700\u4e4b\u5e11\u85cf\u76e1\u6b78\u4eac\u5e2b\u3002\u5176\u5f8c\u8a00\u5229\u8005\u722d\u8ff0\u529f\u5229\uff0c\u7f6e\u535a\u6613\u52d9\uff0c\u7981\u79c1\u5e02\uff0c\u5546\u8cc8\u4e0d\u884c\uff0c\u8700\u6c11\u4e0d\u8db3\u3002\u6545\u5c0f\u6ce2\u5f97\u4ee5\u6fc0\u6012\u5176\u4eba\u66f0\uff1a\u201c\u543e\u75be\u8ca7\u5bcc\u4e0d\u5747\uff0c\u4eca\u70ba\u6c5d\u5747\u4e4b\u3002\u201d\u8ca7\u8005\u9644\u4e4b\u76ca\u773e\u3002</p> <p>\u738b\u5c0f\u6ce2\uff0c\u7709\u5dde\u9752\u795e\u7e23\u7684\u4e00\u500b\u8fb2\u6c11\u800c\u5df2\uff0c\u4e58\u8457\u9019\u500b\u75db\u82e6\u7684\u6642\u52e2\uff0c\u558a\u51fa\u773e\u6c11\u5fc3\u4e2d\u7684\u4e00\u500b\u53e3\u865f\uff0c\u5c31\u5c07\u98e2\u9913\u7dda\u4e0a\u5341\u842c\u8ca7\u6c11\u96c6\u5408\u650f\u4f86\uff0c\u63ed\u7aff\u8d77\u4e8b\uff0c\u653b\u9752\u795e\uff0c\u63a0\u5f6d\u5c71\uff0c\u4ed6\u5011\u6293\u5230\u5f6d\u5c71\u7e23\u7684\u7e23\u4ee4\uff0c\u516c\u958b\u5c07\u4ed6\u7684\u809a\u76ae\u5256\u958b\uff0c\u62ff\u5927\u628a\u5927\u628a\u7684\u9285\u9322\u88dd\u9032\u4ed6\u7684\u809a\u76ae\u91cc\u53bb\uff0c\u8aaa\u4ed6\u5e73\u65e5\u611b\u9322\uff0c\u73fe\u5728\u7d66\u4ed6\u3002\u9019\u500b\u6a23\u5b50\u7684\u61f2\u8caa\u8fa6\u6cd5\uff0c\u9817\u5177\u6232\u5287\u6027\u7684\u523a\u6fc0\u4f5c\u7528\uff0c\u6c11\u5fc3\u5927\u5feb\uff0c\u9752\u3001\u5f6d\u9644\u8fd1\u57ce\u9109\uff0c\u7d1b\u7d1b\u8d77\u4f86\u97ff\u61c9\u3002</p> <p>\u662f\u5e74\u5e74\u5e95\uff0c\u738b\u5c0f\u6ce2\u75c5\u5275\u6b7b\uff0c\u773e\u4eba\u63a8\u6234\u4ed6\u7684\u59bb\u5f1f\u674e\u9806\u505a\u7d71\u5e25\uff0c\u7565\u5dde\u596a\u7e23\uff0c\u6240\u5411\u7121\u6575\uff0c\u5230\u653b\u9677\u909b\u5dde\u6642\uff0c\u4ed6\u5011\u5df2\u6709\u5e7e\u5341\u842c\u4eba\u4e86\u3002</p> <p>\u7fa9\u8ecd\u52e2\u529b\u767c\u5c55\u5f97\u975e\u5e38\u5feb\u901f\u3002\u6df3\u5316\u4e94\u5e74\u6b63\u6708\uff0c\u674e\u9806\u653b\u9677\u6f22\u5dde\uff0c\u8ddf\u8457\u5c31\u653b\u514b\u56db\u5ddd\u7684\u5fc3\u81df\u2014\u2014\u6210\u90fd\uff0c\u65bc\u662f\u4ed6\u4fbf\u81ea\u865f\u201c\u5927\u8700\u738b\u201d\uff0c\u56db\u51fa\u653b\u57ce\u7565\u5730\uff0c\u5168\u8700\u52d5\u6416\u3002</p> <p>\u5b8b\u592a\u7956\u6d3e\u5ba6\u5b98\u738b\u7e7c\u6069\u70ba\u5169\u5ddd\u62db\u5b89\u4f7f\uff0c\u5206\u5175\u9032\u8a0e\uff0c\u64ca\u7834\u674e\u9806\u5927\u8ecd\uff0c\u65ac\u9996\u4e09\u842c\u7d1a\uff0c\u6bba\u7684\u90fd\u662f\u8700\u4eba\uff0c\u4e94\u6708\u6536\u5fa9\u6210\u90fd\uff0c\u4fd8\u865c\u674e\u9806\u3002\u738b\u7e7c\u6069\u52dd\u5229\u5f8c\uff0c\u4f5c\u98a8\u8207\u738b\u5168\u658c\u5982\u51fa\u4e00\u8f4d\uff0c\u8caa\u6200\u6210\u90fd\u7684\u4eab\u53d7\uff0c\u5c08\u52d9\u98f2\u535a\uff0c\u9813\u5e2b\u4e0d\u9032\uff0c\u4efb\u4ee4\u4ed6\u7684\u90e8\u4e0b\u59e6\u6deb\u5a66\u5973\uff0c\u527d\u63a0\u8ca1\u7269\uff0c\u6709\u5982\u51f6\u795e\u60e1\u715e\uff0c\u56e0\u6b64\u6b98\u9918\u7684\u6c11\u773e\u9769\u547d\u904b\u52d5\uff0c\u6b64\u8d77\u5f7c\u843d\uff0c\u4e00\u76f4\u4e0d\u80fd\u8085\u6e05\u3002\u5230\u81f3\u9053\u5e74\u9593\uff0c\u5fa9\u6709\u5f35\u4f59\u4e4b\u4e82\uff0c\u8feb\u5f97\u592a\u5b97\u7687\u5e1d\u4e0b\u7f6a\u5df1\u8a54\u66f0\uff1a\u201c\u6715\u59d4\u4efb\u975e\u7576\uff0c\u71ed\u7406\u4e0d\u660e\uff0c\u81f4\u5f7c\u89aa\u6c11\u4e4b\u5b98\uff0c\u4e0d\u4ee5\u60e0\u548c\u70ba\u653f\uff0c\u7ba1\u69b7\u4e4b\u540f\uff0c\u60df\u7528\u523b\u524a\u70ba\u529f\uff0c\u6493\u6211\u84b8\u6c11\uff0c\u8d77\u70ba\u72c2\u5bc7\u2026\u2026\u201d</p> <p>\u4f46\u662f\uff0c\u5f8c\u4efb\u5b98\u540f\uff0c\u7af6\u559c\u529f\u5229\uff0c\u805a\u6582\u5982\u6545\u3002\u771f\u5b97\u54b8\u5e73\u4e09\u5e74\uff081000\uff09\uff0c\u76ca\u5dde\u620d\u5352\u63a8\u738b\u5747\u70ba\u9996\uff0c\u518d\u5ea6\u53cd\u6297\uff0c\u5efa\u865f\u201c\u5927\u8700\u201d\uff0c\u6539\u5143\u201c\u9806\u5316\u201d\u3002\u5b98\u8ecd\u767c\u5175\u53cd\u653b\uff0c\u738b\u5747\u64a4\u6a4b\u585e\u9580\uff0c\u5805\u5b88\u4e0d\u51fa\uff0c\u5b98\u8ecd\u6316\u6398\u5730\u9053\u5165\u57ce\uff0c\u738b\u5747\u7387\u9818\u9ee8\u5f92\u7a81\u570d\u800c\u9003\uff0c\u5b98\u8ecd\u7591\u6709\u57cb\u4f0f\uff0c\u7e31\u706b\u711a\u57ce\uff0c\u7fcc\u65e5\u5c07\u66fe\u5728\u738b\u5747\u624b\u4e0b\u4efb\u8077\u7684\u6578\u767e\u4eba\uff0c\u96c6\u9ad4\u71d2\u6b7b\uff0c\u6642\u4eba\u70ba\u547c\u51a4\u9177\u3002</p> <p>\u81ea\u5b8b\u6536\u8700\u81f3\u5e73\u5b9a\u738b\u5747\u4e4b\u4e82\uff0c\u8700\u4eba\u7d93\u6b77\u4e86\u4e09\u5341\u516d\u5e74\u4e0d\u505c\u7684\u6230\u722d\uff0c\u4e09\u5341\u516d\u5e74\u7684\u711a\u71d2\u52ab\u63a0\uff0c\u5143\u6c23\u5927\u50b7\uff0c\u518d\u4e5f\u6c92\u6709\u5f9e\u524d\u90a3\u6a23\u7684\u597d\u65e5\u5b50\u4e86\u3002\u9019\u4e00\u6bb5\u6b77\u53f2\u80cc\u666f\uff0c\u8ddd\u8607\u8efe\u4e4b\u751f\u4ea6\u4e0d\u904e\u4e09\u5341\u9918\u5e74\uff0c\u4ed6\u81ea\u7136\u6709\u975e\u5e38\u6df1\u523b\u7684\u5370\u8c61\u3002</p> <p>\u897f\u8700\u7279\u6b8a\u7684\u5730\u7406\u74b0\u5883\uff0c\u4f7f\u8700\u4eba\u81ea\u6709\u7368\u7acb\u5929\u5730\u7684\u601d\u60f3\uff0c\u9032\u800c\u5316\u70ba\u71b1\u70c8\u7684\u9109\u571f\u4e4b\u6200\u3002\u8607\u8efe\u7b46\u4e0b\uff0c\u6642\u5e38\u6d41\u9732\u6fc3\u539a\u7684\u9109\u6101\uff0c\u61f7\u9109\u4e4b\u4f5c\uff0c\u4fef\u62fe\u7686\u662f\u3002</p> <p>\u8700\u4eba\u64c5\u8fad\u8faf\u800c\u597d\u8ad6\u7406\uff0c\u5805\u5f37\u7368\u7acb\uff0c\u4e0d\u8a8d\u70ba\u4e16\u4e0a\u6709\u6240\u8b02\u6b0a\u5a01\u5b58\u5728\u3002\u5b8b\u4eba\u5cb3\u73c2\u300a\u686f\u53f2\u300b\u8aaa\uff1a\u201c\u8700\u58eb\u5c1a\u6d41\u54c1\uff0c\u4e0d\u4ee5\u52e2\u8a58\u3002\u201d\u6240\u4ee5\u8607\u8efe\u5f9e\u653f\uff0c\u6bcf\u6bcf\u7ad9\u5728\u7576\u6b0a\u6d3e\u7684\u53cd\u5c0d\u7acb\u5834\uff0c\u596e\u4e0d\u9867\u8eab\u5730\u70ba\u4e8b\u7406\u722d\u8ad6\u3002\u738b\u5b89\u77f3\u7576\u653f\uff0c\u7099\u624b\u53ef\u71b1\uff0c\u8607\u8efe\u53cd\u5c0d\u65b0\u6cd5\u75c5\u6c11\uff0c\u66f4\u53cd\u5c0d\u4ed6\u7684\u7368\u88c1\u4f5c\u98a8\uff1b\u53f8\u99ac\u5149\u4e3b\u570b\u653f\uff0c\u8607\u8efe\u56e0\u6062\u5fa9\u5dee\u5f79\u4e00\u6848\uff0c\u70ba\u6c11\u722d\u547d\uff0c\u4e0d\u60dc\u7372\u7f6a\u65bc\u76f8\u570b\u4e4b\u9580\uff0c\u5145\u5206\u9336\u73fe\u8700\u4eba\u4e0d\u5411\u6b0a\u52e2\u4f4e\u982d\uff0c\u5bcc\u6709\u653f\u6cbb\u52c7\u6c23\u7684\u5730\u65b9\u6027\u683c\u3002</p> <p>\u834a\u516c\u8b8a\u6cd5\uff0c\u6700\u5927\u76ee\u7684\u8981\u70ba\u570b\u5bb6\u6551\u7aae\uff0c\u5728\u5be6\u65bd\u4e0a\u4e0d\u514d\u6025\u529f\u8fd1\u5229\uff0c\u800c\u758f\u65bc\u6064\u6c11\u3002\u738b\u5c0f\u6ce2\u3001\u674e\u9806\u8d77\u4e8b\u7684\u6210\u56e0\uff0c\u5728\u8607\u8efe\u5fc3\u4e2d\u5b58\u6709\u975e\u5e38\u7684\u8b66\u60d5\uff0c\u6240\u4ee5\u7576\u4ed6\u76ee\u7779\u5c0f\u6c11\u5728\u65b0\u6cd5\u7684\u641c\u62ec\u653f\u7b56\u4e0b\u547b\u541f\u6642\uff0c\u5fc3\u6240\u8b02\u5371\uff0c\u4fbf\u4e0d\u9867\u4e00\u5207\uff0c\u767c\u70ba\u6fc0\u70c8\u7684\u8a00\u8ad6\uff0c\u800c\u8cbd\u60a3\u81ea\u5df1\u3002</p> <p>\u5b8b\u4eba\u6cbb\u8700\uff0c\u4e00\u76f4\u63a1\u53d6\u9ad8\u58d3\u653f\u7b56\uff0c\u8700\u4eba\u666e\u904d\u61f7\u6709\u53cd\u6297\u5fc3\u7406\uff0c\u5f62\u6210\u4e0d\u5408\u4f5c\u7684\u614b\u5ea6\u3002\u53f2\u66f8\u8aaa\u8700\u4eba\u4e0d\u597d\u51fa\u4ed5\u3002\u4e8b\u5be6\u4e0a\uff0c\u5317\u5b8b\u6642\u671f\uff0c\u4e03\u5341\u4e8c\u4f4d\u5bb0\u76f8\u4e2d\uff0c\u7c4d\u5c6c\u897f\u8700\u8005\u53ea\u6709\u56db\u4eba\uff0c\u958b\u570b\u4e4b\u521d\uff0c\u592a\u7956\u3001\u592a\u5b97\u5169\u671d\uff0c\u526f\u76f8\u4ee5\u4e0a\u7684\u9ad8\u5b98\uff0c\u66f4\u7121\u4e00\u500b\u8700\u4eba\u5728\u5167\u3002</p> <p>\u8607\u8efe\u5144\u5f1f\u56e0\u8fb2\u6751\u7834\u7522\uff0c\u5bb6\u696d\u51cb\u96f6\uff0c\u800c\u4e0d\u5f97\u4e0d\u51fa\u4ed5\uff0c\u4f46\u521d\u81f3\u4eac\u5e2b\uff0c\u5c1a\u5728\u61c9\u8a66\u968e\u6bb5\uff0c\u5373\u5df2\u601d\u60f3\u53ca\u65e9\u9000\u4f11\u9084\u9109\uff0c\u5c0b\u6c42\u591c\u96e8\u5c0d\u5e8a\u4e4b\u6a02\uff0c\u6240\u8b02\u201c\u672a\u5165\u4ed5\u7248\uff0c\u5df2\u61f7\u6b78\u5fd7\u201d\u3002\u9019\u4e5f\u662f\u5730\u65b9\u6027\u683c\u7684\u8868\u73fe\uff0c\u8207\u4e00\u822c\u4eba\u7684\u6de1\u6cca\u4e0d\u76e1\u76f8\u540c\u3002</p> <p>\u4e8b\u5be6\u4e0a\uff0c\u5317\u5b8b\u653f\u58c7\uff0c\u5c0d\u8700\u4eba\u78ba\u4e5f\u61f7\u6709\u504f\u898b\u3002\u8607\u8efe\u4ee5\u5d07\u9ad8\u7684\u6587\u5b78\u8072\u671b\u800c\u7372\u5f97\u653f\u6cbb\u5730\u4f4d\uff0c\u4f46\u5f9e\u653f\u56db\u5341\u5e74\uff0c\u5b98\u6b62\u65bc\u6587\u5b78\u4f8d\u5f9e\u4e4b\u81e3\uff0c\u5f9e\u672a\u64cd\u6301\u5be6\u969b\u653f\u67c4\uff0c\u6bcf\u7576\u4f4d\u8fd1\u516c\u8f14\u4e4b\u9078\u6642\uff0c\u8a00\u5b98\u5011\u4fbf\u5927\u8072\u8b66\u544a\uff1a\u201c\u4e0d\u80fd\u7528\u4ed6\u70ba\u5bb0\u8f14\u3002\u201d\u8607\u8efe\u752b\u767b\u57f7\u653f\uff0c\u671d\u4e2d\u4fbf\u8208\u8d77\u4e00\u7247\u201c\u8700\u4eba\u592a\u76db\u201d\u7684\u8b70\u8ad6\u3002\u96d6\u7136\u6709\u4eba\u70ba\u8607\u8efe\u52a0\u4e0a\u4e00\u9802\u201c\u8700\u6d3e\u201d\u9818\u8896\u7684\u9ad8\u5e3d\u5b50\uff0c\u5012\u662f\u5ba3\u4ec1\u592a\u7687\u592a\u540e\u4e86\u89e3\u4ed6\u5011\uff0c\u7c3e\u524d\u6eab\u8aed\u66f0\uff1a\u201c\u8001\u8eab\u77e5\u9053\uff0c\u4f60\u5144\u5f1f\u5728\u671d\uff0c\u81ea\u4f86\u5b64\u7acb\u3002\u201d</p> <p>\u9b4f\u6cf0\u300a\u6771\u8ed2\u7b46\u9304\u300b\uff1a\u201c\u81ea\u738b\u5747\u3001\u674e\u9806\u4e4b\u4e82\u5f8c\uff0c\u51e1\u5b98\u65bc\u8700\u8005\uff0c\u591a\u4e0d\u6308\u5bb6\u4ee5\u884c\uff0c\u81f3\u4eca\u6210\u90fd\u7336\u6709\u6b64\u7981\u3002\u5f35\u8a60\u77e5\u76ca\u5dde\uff0c\u55ae\u9a0e\u8d74\u4efb\u2026\u2026\u201d\u84cb\u70ba\u9019\u5730\u65b9\u860a\u85cf\u8457\u53cd\u653f\u5e9c\u7684\u60c5\u7dd2\uff0c\u6050\u6015\u6703\u767c\u751f\u4e0d\u6e2c\u7684\u5371\u96aa\u3002\u6176\u66c6\u4ee5\u5f8c\uff0c\u9019\u7a2e\u7dca\u5f35\u7684\u60c5\u5f62\uff0c\u7a0d\u7a0d\u9b06\u5f1b\uff0c\u4f46\u662f\u4e00\u822c\u58eb\u5927\u592b\u5c0d\u8700\u4eba\u7684\u6b67\u8996\uff0c\u4e26\u672a\u5b8c\u5168\u6d88\u6cef\u3002</p> <p>\u8607\u8efe\u56db\u5341\u5e74\u7684\u653f\u6cbb\u751f\u6d3b\u4e2d\uff0c\u88ab\u4eba\u758f\u9060\uff0c\u6c38\u9060\u5b64\u7acb\uff0c\u53d7\u51fa\u751f\u5730\u7684\u5f71\u97ff\uff0c\u4e0d\u80fd\u8aaa\u5b8c\u5168\u6c92\u6709\u3002</p>"},{"location":"Thoughts/Camera%20on%20the%20phone/","title":"Camera on the Phone","text":"<p>Jacobs had been slated to testify at the Apple trial before the companies settled. I asked him what he would have tried to get across if had taken the stand.</p> <p>\"That we've had a tremendous impact,\"he says, \"Steve Jobs came up with a wonderful interface that allowed people to make use of all of these capabilities that we've been providing. I remember back in about 2000 when I gave a talk and said we're working on putting a camera on the phone. And everybody's reaction was,'Why would I ever want a camera on my phone?'\"</p>"},{"location":"Thoughts/Love%20is%20Wise%2C%20Hatred%20is%20Foolish/","title":"Bertrand Russell: Love is Wise, Hatred is Foolish","text":"<p>\u201cLove is wise, hatred is foolish.\u201d \u2014 Bertrand Russell</p> <p>The British philosopher Bertrand Russell (1872-1970) gave us some of the more enduring developments in 20th-century philosophy. His 10 commandments of teaching and writing on avoiding foolish opinions demonstrate how Russell wanted philosophy to speak to ordinary people.</p> <p>In this rare 1959 interview with BBC, Russell is asked to pass along advice to a later generation. In just under two minutes he articulates two things: one intellectual and one moral that still resonate today and cut through our noisy world.</p> <p>Interviewer: Suppose Lord Russell that this film were to be looked at by our descendants, like a dead sea scroll in a thousand years time. What would you think it\u2019s worth telling that generation about the life you\u2019ve lived and the lessons you\u2019ve learned from it?</p> <p>Russell: I should like to say two things, one intellectual and one moral.</p> <p>The intellectual thing I should want to say to them, is this: When you are studying any matter, or considering any philosophy, ask yourself only what are the facts and what is the truth that the facts bear out. Never let yourself be diverted, either by what you wish to believe, or by what you think would have beneficent social effects if it were believed. But look only, and solely, at what are the facts. That is the intellectual thing that I should wish to say.</p> <p>The moral thing I should wish to say to them is very simple: I should say, love is wise, hatred is foolish. In this world, which is getting more and more closely interconnected, we have to learn to tolerate each other, we have to learn to put up with the fact that some people say things that we don\u2019t like. We can only live together in that way\u2014and if we are to live together and not die together\u2014we must learn a kind of charity and a kind of tolerance, which is absolutely vital to the continuation of human life on this planet.</p>"},{"location":"Thoughts/Personal%20Preference/","title":"About Personal Preference","text":"<p>Gazing at the world, chasing phenomena, one soon feels dizzy, so I feel. Of course there are people who can keep gazing for a long time, and I am envious of this. Such people believe that they are observing the world, and I have long since stopped believing in such claims.</p> <p>Each person's heart is different. Again, when faced with a photo of a pretty girl, a girl looks over and all these places - hair, clothing, eyeliner, blush - are marked red and highlighted; a boy looks over and the focus is all on one face, constantly calculating proportions and relative positions. So, what is observation? There is no observation, only projection. What one wants and cares about inside oneself, one projects them into the external world and then goes looking for them. How else can one explain what one will pay special attention to, what one will be particularly sensitive to?</p> <p>So when gazing at the world, one is gazing at one's own inner projection, finding its existence in every corner of the world, finding its manifestation in all phenomena. That is certainly a very tiring thing. If a person is convinced in his heart that money is supreme, then everything he sees in the world has a price tag on it, and he needs to identify it one by one. All phenomena and actions are the flow of money, and he needs to see this flow for what it is. How can one not feel dizzy when gazing continuously at countless targets and movements in this way?</p> <p>People say that the world makes them feel bad when they look at it, and that is because they have gazed at it for too long. One needs to take one's gaze back, back to one's side, back to the near cut, back to one's inner world. But one's own company with oneself may be far more unbearable than gazing at the world. And so, one needs to focus on what is around oneself, and that place is personal preference.</p> <p>Play cards, sing, paint, read, travel, put together Lego, listen to music, if developed into a personal hobby, all should have experienced one thing, that is, immersed in it is easy to forget the passage of time. Not surprisingly, time itself is not an entity, but a psychological feeling. We need to be aware of the passage of time from the changes in the external world, but when one focuses on one's personal hobby, no matter what the project is, one is actually cutting off most of the connection between oneself and the external world, and it is naturally not easy to notice the passage of time.</p> <p>And then personal hobbies are neutral and basically impossible to project. The world is too big, there are too many things, and one can always keep finding projections that fit inside, proving over and over again that one has the right judgment, the right emotions, the right feelings. Personal preference is not. Personal preference is a very limited and small thing, your intention, your observation is no matter how strong, you pick up a bad hand is a bad hand, it does not listen to you at all, it has its own ideas. You think the cards fall raw hands, fresh hands will be good; you think last night to eat fast, today should be good hands. The card does not bother to pay attention to you, what should be the face of the card is still what the face of the card, the projection function failed. Unlike you face the world, you internally think that everyone is targeting yourself, then you can immediately observe countless instances of targeting you.</p> <p>Personal preferences are also controllable. The world is not controllable, the world is an all-night movie theater. But whenever you sit there, scene after scene will be screened continuously before your eyes, endlessly. The projector is in your own mind, projecting light and shadow externally, and you want to stop, you can't stop, you just keep watching with your eyes wide open. You do know that it is a small existence, you do know that it has a limited range of variation, and you do expect it to bring much joy and satisfaction. None of it is big, but it is enough for the individual. When everything is under control, one's mind does not easily fall into frenzy, but becomes very peaceful. How much can happen on a card table a chessboard a watering hole a stack of papers a CD and how much can be possible? Even when you travel, when you step into a city as a traveler, all the possibilities of life immediately collapse into a limited number of things, the ones that suit the traveler.</p> <p>There has to be some personal hobby that helps you detach from the outside world and rest for a while in the small world in front of you. Which again has a little fun, which avoids the awkwardness of spending time with yourself. In the ordinary mode, a bad feeling arises in a person's mind, and then a bad thought arises, rising to a bad idea. At this point he looks outward and immediately finds a bunch of bad existences and bad phenomena that corroborate his bad thought. The bad thought returns inside, enhancing the bad feeling, giving rise to an even worse thought, rising to an even worse thought ...... It is a continuous cycle of reinforcement until one feels exhausted in the face of the world.</p> <p>Personal hobbies can cut off this cycle and turn one's life into a simple pattern. Yes, personal hobbies consume time and money, and this is often criticized, with an even harsher criticism added: it's an escape from reality. So how do you face reality and the world? By turning off the internal projector, stopping the projection, and observing truthfully with an unbiased attitude and without personal bias. The problem is that most people can't do that. Observing the outside world also consumes time and money, but it consumes mental energy. This is not the case with personal hobbies, which bring a little pleasure, a little satisfaction, a little rest, a little recharging process.</p> <p>How to understand those old pictures of people reading or playing the piano on the ruins of war? A noble spiritual world? Optimism? No. Sitting on the edge of rubble and crumbling buildings, one begins to read or to play the piano, and everything around one ceases to exist. One is thus given a moment of respite from the turmoil before him and returns to himself. In the midst of the external world, over which he has no control, he has more or less a book, a violin that is reliable, that he can control, and from which he can derive pleasure and beauty. When he put down the book, put away the strings, and faced the world again, at least he had a peaceful heart, and because of the joy and beauty, hope existed in this peaceful heart.</p>"},{"location":"Thoughts/Pride%20and%20Prejudice/","title":"Adout Pride and Prejudice","text":"<p>'It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife'.</p> <p>This is the classic beginning of Jane Austen's masterpiece Pride and Prejudice.</p> <p>Is this right?</p> <p>Of course not, to be biased and self-righteous.</p> <p>Putting a stupid sentence at the beginning of the novel, how can it form a classic effect?</p> <p>The novel begins in many ways. Straight to the point, drinking out of thin air, and eloquently speaking, and so on.</p> <p>Austin began with what Nabokov called a \"smiley\" irony.</p> <p>Of course, when we say \"Pride and Prejudice\", the plot itself is also full of irony.</p> <p>For example, when Darcy first met Elizabeth, she said that she was okay, but she was not good-looking enough, and couldn't be attracted to herself - and finally married Elizabeth, which was really fragrant.</p> <p>As the title suggests, many characters in the book have their own \"Pride and Prejudice\", and the whole book is also light and ironic, teasing those characters who are full of bachelors, marriages, and property.</p> <p>Whoever joked that many aunts and wives in Austen's novels think about their daughter's \"marriageability\" every day, which is also wonderful.</p> <p>With a sarcasm, as the beginning of a novel full of sarcasm, the outline is very good.</p> <p>But why is this sarcasm so powerful?</p> <p>The beginning of this sentence, of course, is not Austen's heart, but imitating the logic of her characters.</p> <p>To ridicule a very absurd thing, you only need to reproduce the absurdity directly.</p> <p>Austen has a classic mocking skill called free indirect quotation - she will speak in the narrative, directly imitating the characters she writes about.</p> <p>For example, in the following paragraph, Mrs. Ben and the like, running around pondering and trying to rope in Mr. Bin.</p> <p>Finally they had no choice but to listen to indirect information from their neighbor, Mrs. Lucas. Her reports were all good. Sir William was said to be very fond of him. He was very young, exceptionally good-looking, extremely modest, and, most importantly, he was planning to invite a large group of guests to the next ball. This could not be better; the love of dancing is a step towards love; everyone is passionately hoping to get Mr. Bingley's heart.</p> <p>The phrase \"it could not have been better\" is not in Austen's mind, but in the minds of Mrs. Bennett.</p> <p>The narration of the narrator, suddenly using the tone of the characters in the pen, is very funny.</p> <p>Mr. Lu Xun has a piece called \"Rei Shui \", about Dayu's treatment of water. It is about the people's suffering, but the officials don't care, to mirror the Great Yu who wants to get serious about practical matters.</p> <p>The novel begins with.</p> <p>The people of Master Shun were not all crowded on the tops of the hills exposed to the water, some were tied to the tops of trees, some were sitting on wooden rows, and some of them had small wooden shelters on them,  which looked very poetic from the shore. </p> <p>The phrase \"rich in poetic interest\" is full of mockery when it says that the suffering people are \"rich in poetic interest.</p> <p>Is it Mr. Lu Xun himself who thinks so? Anyone who has read the novel knows that of course not.</p> <p>Do the people think so? Of course not.</p> <p>It is Mr. Lu Xun who is imitating those officials who are standing around talking. This one sentence sets the tone of the first half of \"Water for Thought\".</p> <p>It is similar to Austen's ironic opening, right?</p> <p>**The first half of the story is about a woman who has been in love with a man for years. Bai Liusu went back to Shanghai after a period of contact with Fan Liuyuan, so her feudal family peeped in while wondering.</p> <p>The White House has already had an ear to the gods and found out that Miss Six has been living with Fan Liuyuan in Hong Kong. Now she has been playing with others for more than a month and has returned as if nothing had happened, clearly intent on disgracing the White family. The first thing you need to do is to get the money. Really got the money, but also will not be noiseless home to come, obviously did not get him what benefits. Originally, a woman on the man's pawn, should die; woman to the man on, it is more adulterous;  If a woman wants to give when to the man and failed, but on the other hand, it is a double material obscene evil , kill her also tainted the knife.</p> <p>The phrase \"if a woman wants to give when to a man and failed, but instead fell for someone else's pawn, that is double the lust and evil\", without quotation marks in the narrative, is the perfect mockery of the concept of the White House.</p> <p>So cluck, to mock a person, just repeat his absurd logic on the line - also considered reductio ad absurdum.</p> <p>As for the statement \"It has become a universally accepted truth that every bachelor who has property must marry a wife\" - what is the most ironic point?</p> <p>You can try to remove the words \"\"must, all, universally accepted\" - if you remove these words, it starts with.</p> <p>\"It has become a truth, that a single man with property needs to marry a wife.\"</p> <p>It is a truth, that a single man in possession of a good fortune is in want of a wife.</p> <p>That's not quite true, but the mockery is not as strong as before.</p> <p>You must have seen.</p> <p>The funniest thing is precisely those categorical and self-righteous words, truth universally, must, \"necessarily, wherever, universally recognized.\" </p> <p>Putting narrow prejudice for truth. </p> <p>This technique is so brilliant that many of its predecessors have since used it ironically.</p> <p>In Qian Zhongshu's \"The Siege\", the pedantic Fang Hongjian's father had a big nonsense line.</p> <p>The woman had a baby with a car driver and came out as a nurse, this kind of woman is all toxic and cannot feed children.</p> <p>If the word \"all\" is removed from this sentence, it is not so strong mockery.</p> <p>In Mr. Lu Xun's \"The True Story of Ah Q\", it is also.</p> <p>The Chinese men, most of them could have been sages, but unfortunately all of them were ruined by women. The Shang Dynasty is the death of Daji; the Zhou Dynasty is the Baosi spoiled; Qin ...... although the history is not clear, we also assume that he because of women, may not be very wrong; and Dong Zhuo but  indeed  to the mink cicada killed.</p> <p>\"All, indeed\", the funny point on these words.</p> <p>So, probably, Austen, Qian Zhongshu, Zhang Eiling and Mr. Lu Xun, which were born in the 18th century, 19th century and 20th century, different backgrounds and different languages, intelligent and poisonous, but coincidentally understand this truth: **The most absurdly funny lines.</p> <p>The most absurdly funny lines are often those arrogant, self-righteous, full of big, but not when the nail-biting harsh words, \"all, necessarily, the world recognized.\" </p> <p> It's easy to be embarrassed when the words are full and there's no room for spin. </p> <p> So just repeating that kind of talk is the perfect irony. </p>"},{"location":"Windows/WSA/","title":"Windows Subsystem for Android","text":""},{"location":"Windows/WSA/#get-the-download-address-of-wsa","title":"Get the download address of WSA.","text":"<p>Open this link https://store.rg-adguard.net/,</p> <p>enter the address of WSA in the Microsoft App Store: https://www.microsoft.com/store/productId/9P3395VX91NR,</p> <p>and select the slow channel, which corresponds to the download address of the beta channel.</p> <p>Pull the browser to the bottom and download the installation package <code>MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe.msixbundle</code> with a size of 1.2G.</p>"},{"location":"Windows/WSL/","title":"Windows Subsystem for Linux","text":""},{"location":"Windows/WSL/#wslconfig-command","title":"wslconfig command","text":"<ul> <li><code>wslconfig /setdefault &lt;DistributionName&gt;</code> - Set the default running linux system. As mentioned above, if you execute wslconfig /setdefault ubuntu, then executing the bash command will run ubuntu</li> <li><code>wslconfig /unregister &lt;DistributionName&gt;</code> - Uninstall the linux system. When there is a problem with the system, we can uninstall it and then reinstall it. Such as: wslconfig /unregeister ubuntu</li> <li><code>wsl -l</code> - View the installed linux system.</li> <li><code>ubuntu config --default-user root</code> - Change the default user to root, here is an example of Ubuntu.</li> </ul>"},{"location":"Windows/WSL/#what-is-this","title":"What is this?","text":"<p>This is a collection of instructions to install and configure the tools I use for development/data science/physics ... I use WSL on Windows 11 to use things like Python, Latex, Git, C++, ... Most of this comes from the Pep Toolbox-Workshop (https://toolbox.pep-dortmund.org/) other things come from personal experience. This collection is mainly for myself, so that I have everything I need at one place, but I guess it could be useful for other people too. And most of it should work on native Ubuntu or Linux too.</p>"},{"location":"Windows/WSL/#installation-instructions-mainly-on-windows-11-wsl","title":"Installation Instructions (mainly on Windows 11 + WSL)","text":"<p>Preferably use Windows Terminal and Visual Studio Code for everything.</p>"},{"location":"Windows/WSL/#wsl-and-ubuntu","title":"WSL and Ubuntu","text":"<ul> <li>Open Windows Terminal (PowerShell) as an Administrator</li> <li>enter <code>wsl --update</code></li> <li>enter <code>wsl --install -d Ubuntu</code></li> <li>after successfull completion, restart your computer</li> <li>enter a username and password for the Ubuntu login</li> <li>Update the packages via <code>sudo apt update &amp;&amp; sudo apt upgrade</code></li> <li>Optional: Set Ubuntu as the default shell in Windows Terminal</li> </ul> <p>For more info: https://docs.microsoft.com/de-de/windows/wsl/install If you are having Connection issues and using Avast: https://github.com/MicrosoftDocs/WSL/issues/481</p>"},{"location":"Windows/WSL/#usefulessential-linux-tools","title":"Useful/Essential Linux Tools","text":"<p>Install each via <code>sudo apt install &lt;Name&gt;</code></p> <p>-&gt; <code>sudo apt install git make curl</code></p> <ul> <li>make</li> <li>curl</li> <li>git</li> </ul>"},{"location":"Windows/WSL/#visual-studio-code","title":"Visual Studio Code","text":"<p>Download VSCode from here: https://code.visualstudio.com/ Or if you are worried about privacy, open source, tracking... use VSCodium from here: https://vscodium.com/ And then install it.</p> <p>It's best to always open VS Code via the Ubuntu shell: <code>code &lt;Path&gt;</code> (or <code>codium &lt;Path&gt;</code>) -&gt; this will run VS Code with \"Remote for WSL\" and it will use WSL for Python etc.</p> <p>Recommended Settings (in VSCode-&gt;File-&gt;Preferences-&gt;Settings): - English as Language - Word Wrap as \"always\"</p> <p>Recommended VS Code Extensions: - Remote - WSL - Rainbow CSV - vscode-pdf - Python - C/C++ - LaTeX Workshop (disable auto compile!)   - in VSCode-&gt;File-&gt;Preferences-&gt;Settings:   - search for \"latex auto build clean and retry\" and remove the checkmark   - search for \"latex auto build run\" and set it to \"never\" - Visual Studio Live Share</p>"},{"location":"Windows/WSL/#python-scientific-python-via-anaconda","title":"Python (Scientific Python via Anaconda)","text":"<ul> <li>Go to https://www.anaconda.com/products/individual</li> <li>Copy the link adress of the Linux(!) \"64-Bit (x86) Installer\"</li> <li>Download the Installer: <code>wget -O ~/Anaconda-Installer.sh &lt;Copied-Link-Adress&gt;</code></li> <li>For example: <code>wget -O ~/Anaconda-Installer.sh https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh</code></li> <li>Install Anaconda via <code>bash ~/Anaconda-Installer.sh -b -p ~/.local/anaconda3</code></li> <li><code>-b</code> is for batch-mode so that the <code>~/.bashrc</code> does not get cluttered</li> <li><code>-p</code> is to specify where Anaconda should be installed to</li> <li>Remove the Installer: <code>rm ~/Anaconda-Installer.sh</code></li> <li>To automatically activate Anaconda (i.e. Python) add the following lines at the end of you <code>~/.bashrc</code> file:   Text Only<pre><code># Python/Anaconda:\n. \"$HOME/.local/anaconda3/etc/profile.d/conda.sh\"\nconda activate\n</code></pre></li> <li>You could for example open it with <code>code ~/.bashrc</code></li> </ul>"},{"location":"Windows/WSL/#useful-python-packages-not-in-anaconda","title":"Useful Python Packages not in Anaconda","text":"<ul> <li>Uncertainties: <code>pip install uncertainties</code></li> </ul>"},{"location":"Windows/WSL/#latex-with-texlive","title":"Latex (with TexLive)","text":"<ul> <li>Warning: This installation takes a long time because TexLive is a large package (~5GB)</li> <li>Download and extract the TexLive Installer: <code>cd ~ &amp;&amp; curl -L http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz | tar xz</code></li> <li>Install TexLive: <code>TEXLIVE_INSTALL_PREFIX=$HOME/.local/texlive ~/install-tl-*/install-tl</code></li> <li>Start the Installation using the option <code>I</code></li> <li>Remove the installer: <code>rm -rf ~/install-tl-*</code></li> <li>Add the following to your <code>~/.bashrc</code> file:   Text Only<pre><code># LaTeX/TexLive:\nexport PATH=\"$HOME/.local/texlive/2021/bin/x86_64-linux:$PATH\"\n</code></pre></li> <li>You may need to adjust the path (i.e. the year)</li> <li>restart your terminal (or use <code>source ~/.bashrc</code>)</li> <li>adjust the config: <code>tlmgr option autobackup -- -1</code> and <code>tlmgr option repository http://mirror.ctan.org/systems/texlive/tlnet</code></li> </ul>"},{"location":"Windows/WSL/#c","title":"C++","text":"<ul> <li>see: https://code.visualstudio.com/docs/cpp/config-wsl</li> <li> <p>or better use a Makefile</p> </li> <li> <p>to install Eigen:</p> </li> <li><code>sudo apt install libeigen3-dev</code></li> <li>now it could be included with <code>#include &lt;eigen3/Eigen/Dense&gt;</code></li> <li>if you want to include it with <code>#include &lt;Eigen/Dense&gt;</code> you need to create a symbolical link: <code>sudo ln -s /usr/include/eigen3/Eigen /usr/include/Eigen</code></li> </ul>"},{"location":"Windows/WSL/#git-configuration-for-github","title":"Git configuration (for GitHub)","text":"<ul> <li>Git has to be installed: <code>sudo apt install git</code></li> <li>recommended configuration (as commands):   Text Only<pre><code>git config --global user.name \"Max Mustermann\"\ngit config --global user.email \"max.mustermann@email-provider.com\"\ngit config --global rebase.stat true\ngit config --global merge.conflictstyle diff3\n</code></pre></li> <li>You need to use a SSH key for GitHub (https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh):</li> <li>Create SSH-Key: <code>ssh-keygen -t ed25519 -C \"max.mustermann@email-provider.com\"</code></li> <li>Use the default path</li> <li>Enter the password you want to use (optional)</li> <li>Copy the public key: <code>cat ~/.ssh/id_ed25519.pub | clip.exe</code></li> <li>Go to GitHub (https://github.com/settings/keys) and add the key (the title is not important)</li> <li>now you can clone the GitHub repositories using the SSH URLs (for example <code>git clone git@github.com:NicoJG/WSL_Instructions.git</code>)</li> </ul>"},{"location":"Windows/WSL/#useful-windows-configurations","title":"Useful Windows Configurations","text":"<p>in the Windows Explorer, configure: - show file extensions - show hidden files/folders</p>"},{"location":"Windows/WSL/#wsl-bug-fixes-workarounds","title":"WSL Bug fixes / workarounds","text":""},{"location":"Windows/WSL/#graphical-interfaces-dont-work-for-example-matplotlib","title":"Graphical Interfaces don't work (for example matplotlib)","text":"<p>Should not be necessary for Windows 11 but on Windows 10 it was necessary. You need a XServer.</p> <ul> <li>Install VcXsrv (https://sourceforge.net/projects/vcxsrv/)</li> <li>in Windows search for XLaunch and choose the following configurations:</li> <li>Multiple Windows, Start no client, all extra settings, save configuration</li> <li>You may (or must perhaps) reject the firewall permissions that should pop up</li> <li><code>mkdir /tmp/vcxsrv</code></li> <li> <p>Add the following to your <code>~/.bashrc</code>:   Text Only<pre><code># XServer/VcXsrv:\nexport DISPLAY=$(route.exe print | grep 0.0.0.0 | head -1 | awk '{print $4}'):0.0\nexport XDG_RUNTIME_DIR=\"/tmp/vcxsrv\"\nexport LIBGL_ALWAYS_INDIRECT=1\n</code></pre></p> <ul> <li>if this does not work try <code>export DISPLAY='grep -oP \"(?&lt;=nameserver ).+\" /etc/resolv.conf':0.0</code> or <code>export DISPLAY=localhost:0.0</code></li> </ul> </li> <li> <p>Optional: to be able to start the XServer from the command line <code>check_xsrv</code>, add the following to your <code>~/.bashrc</code>:   Text Only<pre><code># open vcxsrv if it is not running\nopen_vcxsrv() {\n    if ! cmd.exe /c tasklist | grep --quiet vcxsrv; then\n        cmd.exe /c \"C:\\Users\\Nico\\Documents\\config.xlaunch\"\n    fi\n}\nalias check_xsrv=open_vcxsrv\n</code></pre></p> </li> </ul>"},{"location":"Windows/WSL/#jupyter-labjupyter-notebook-on-wsl","title":"Jupyter Lab/Jupyter Notebook on WSL","text":"<p>At the moment Jupyter is buggy and won't open right. For more information: https://stackoverflow.com/a/65133953 For Jupyter Notebook just replace every \"Lab\" with a \"Notebook\"</p> <ul> <li>Generate the config file <code>jupyter server --generate-config</code></li> <li>Add the following line to <code>~/.jupyter/jupyter_server_config.py</code>: <code>c.ServerApp.use_redirect_file = False</code></li> <li>if this does not work, try the following (see https://github.com/jupyterlab/jupyterlab/issues/10413):</li> <li>Generate the config file <code>jupyter lab --generate-config</code></li> <li>Add the following line to <code>~/.jupyter/jupyter_lab_config.py</code>: <code>c.LabApp.open_browser = False</code></li> </ul>"},{"location":"Windows/WSL/#terminal-customizations","title":"Terminal Customizations","text":"<p>The default terminal (Windows Terminal + Bash) is fine, but you can do so much more. I like to use zsh with oh-my-zsh (https://github.com/ohmyzsh/ohmyzsh). Once it is configured properly it looks amazing and has man convenient tools.</p> <p>My current terminal: </p>"},{"location":"Windows/WSL/#customize-your-terminal-windows-terminal","title":"Customize your terminal (Windows Terminal)","text":"<p>To look good, you first have to customize Windows Terminal</p> <ul> <li>Choose a color scheme from https://windowsterminalthemes.dev/</li> <li>I like \"Solarized Dark Higher Contrast\" (https://windowsterminalthemes.dev/?theme=Solarized%20Dark%20Higher%20Contrast)</li> <li>click on \"Get Theme\"</li> <li>in Windows Terminal-&gt;Settings click \"Open JSON file\"</li> <li>paste the color scheme after <code>\"schemes\": [</code> and add a <code>,</code> after the closing <code>}</code> (then save)<ul> <li>potentially change \"background\" to black (<code>#000000</code>)</li> </ul> </li> <li>make the chosen color scheme the default for Ubuntu (in Settings-&gt;Ubuntu-&gt;Appearance)</li> <li>choose a background image and make it ~30% opaque (in Settings-&gt;Ubuntu-&gt;Appearance) (for example https://en.wikipedia.org/wiki/Helix_Nebula#/media/File:NGC7293_(2004).jpg)</li> <li>Change the \"Bell notification style\" to not audible (in Settings-&gt;Ubuntu-&gt;Advanced)</li> <li>Install a \"Nerd Font\" from https://www.nerdfonts.com/font-downloads</li> <li>I like \"DejaVuSansMono NF\" (<code>DejaVu Sans Mono Nerd Font Complete Windows Compatible.ttf</code>)</li> <li>Set the Font for the Ubuntu profile (in Settings-&gt;Ubuntu-&gt;Appearance)</li> </ul>"},{"location":"Windows/WSL/#installing-oh-my-zsh","title":"Installing Oh My Zsh","text":"<ul> <li>Install Zsh: <code>sudo apt install zsh</code></li> <li>Make Zsh your default shell: <code>chsh -s $(which zsh)</code></li> <li>Install OhMyZsh: <code>sh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"</code></li> <li>restart the shell (by using <code>exec zsh</code>)</li> <li>you need to copy all customizations you did to the <code>~/.bashrc</code> to <code>~/.zshrc</code>! Because the bashrc won't be run anymore.</li> </ul> <p>For a few tips and tricks on using Zsh: https://www.twilio.com/blog/zsh-tricks-to-blow-your-mind</p>"},{"location":"Windows/WSL/#styling-zsh-with-powerlevel10k","title":"Styling Zsh with Powerlevel10k","text":"<p>Powerlevel10k is not necessary, you could choose a theme shipped with Oh My Zsh (<code>agnoster</code> or look at https://github.com/ohmyzsh/ohmyzsh/wiki/Themes) But I really like Powerlevel10k.</p> <ul> <li>Install Powerlevel10k:</li> <li><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k</code></li> <li>Set <code>ZSH_THEME=\"powerlevel10k/powerlevel10k\"</code> in <code>~/.zshrc</code></li> <li><code>exec zsh</code></li> <li>Follow the configuration wizard (<code>p10k configure</code>) which should show up (You should have already installed a Nerd Font!)</li> <li>(https://github.com/romkatv/powerlevel10k#oh-my-zsh)</li> <li>Powerlevel10k is fully customizable (look into <code>~/.p10k.zsh</code>)</li> <li>a few suggestions to look into:     Text Only<pre><code>POWERLEVEL9K_SHORTEN_DIR_LENGTH\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS\nPOWERLEVEL9K_RIGHT_PROMPT_ELEMENTS\nPOWERLEVEL9K_TIME_FORMAT\n</code></pre></li> <li>Choose plugins for Zsh (in <code>~/.zshrc</code>)</li> <li>https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins or somewhere else via google</li> <li>a few suggestions to look into:     Text Only<pre><code>git\ncolorize (with alias cat=\"ccat\")\ncommand-not-found\nvscode\nlol\nzsh-interactive-cd\n</code></pre></li> <li>recommended plugins that are not included in Oh My Zsh (don't forget so change the <code>~/.zshrc</code>):<ul> <li>zsh-autosuggestions: <code>git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></li> <li>zsh-syntax-highlighting: <code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</code></li> <li>conda-zsh-completion</li> </ul> </li> <li>Oh My Zsh also has many customizations (look into <code>~/.zshrc</code>)</li> </ul>"},{"location":"Windows/WSL/#updating","title":"Updating","text":"<ul> <li>WSL-Kernel(in PowerShell): <code>wsl --update</code></li> <li>most of it: <code>sudo apt update &amp;&amp; sudo apt upgrade</code></li> <li>Anaconda: <code>conda update anaconda</code></li> <li>TexLive: <code>tlmgr update --self --all --reinstall-forcibly-removed</code></li> <li>Oh My Zsh: <code>omz update</code></li> <li>Powerlevel10k: <code>git -C ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k pull</code></li> </ul>"},{"location":"Windows/Win%2BR/","title":"Win+R","text":"<p>Type <code>Win</code>+<code>R</code> to Run : Text Only<pre><code>msconfig\n</code></pre> In <code>System Configuration</code> , select the Services :</p> <p>pick '<code>Hide all Microsoft services</code>', then Disable all the services you don't need.</p> <p>Enter the following commands in this text document: Text Only<pre><code>DEL /F /A /Q \\\\?\\%1\n\nRD /S /Q \\\\?\\%1\n</code></pre> For Windows network connection, use cmd: Text Only<pre><code>ipconfig/flushdns\n\nipconfig /displaydns\n</code></pre> For Windows icon refresh, follow: Press the <code>WIN</code>+<code>R</code> key combination on the keyboard, and type <code>[%USERPROFILE%\\AppData\\Local]</code> in the pop-up window to confirm.</p> <p>Open the folder window to delete the <code>IconCache.db</code> icon cache file in the hidden state, and you're done.</p> <p>When the icon of a program locked on the taskbar of the computer is displayed in white, while other icons are displayed normally,follow:</p> <p>Press <code>Windows</code> + <code>R</code> key at the same time to open the Run dialog box, enter <code>ie4uinit.exe -show</code> and press <code>Enter</code> to repair.</p> <p>For Windows Defender's DetectionHistory, use explorer.exe: (Use <code>administrator</code> privileges) <code>C:\\ProgramData\\Microsoft\\Windows Defender\\Scans\\History\\Service\\DetectionHistory</code></p> <p>Regarding Windows Explorer crashes, you can try the following solutions to check the integrity of your system components and see if that resolves the issue:</p> <p>Type the following commands at an administrator command prompt: Text Only<pre><code>sfc /SCANNOW and\nDism /Online /Cleanup-Image /ScanHealth\n</code></pre> This command will scan all system files and compare them with the official system files, scanning the computer for inconsistencies. Text Only<pre><code>Dism /Online /Cleanup-Image /CheckHealth\n</code></pre> This command must be used when the system file is found to be damaged after the execution of the previous command. Text Only<pre><code>DISM /Online /Cleanup-image /RestoreHealth\n</code></pre> This command restores those various system files to the official system source files. Reboot after completion, and then type the following command: Text Only<pre><code>sfc /SCANNOW\n</code></pre> Check if system files are repaired.</p> <p>Opening a folder in Windows Explorer will automatically pop up a new window, how to set it to open in the same window? 1. Repair damaged system files Run CMD as administrator: <code>Start Menu</code> -&gt; <code>All Programs</code> -&gt; <code>Accessories</code> -&gt; Right-click the command line prompt and select <code>Run as administrator</code>. Enter <code>sfc /scannow</code> and press Enter. It is best to restart after checking. 2. Register the invalid DLL file Open Run: <code>Start Menu</code> -&gt; <code>All Programs</code> -&gt; <code>Accessories</code> -&gt; <code>Run</code>. Enter <code>regsvr32 \"%SystemRoot%\\System32\\actxprxy.dll</code> and press Enter. After the prompt is successful, enter <code>regsvr32 \"%ProgramFiles%\\Internet Explorer\\ieproxy.dll</code> and press <code>Enter</code>. After the prompt is successful, check whether it is back to normal.</p> <p>Open Windows PowerShell as administrator (right-click) in the Windows PowerShell folder in the Start menu.</p> <ol> <li> <p>View the app Enter the command Get-AppxPackage to view all installed apps. Be sure to do this step, the content will be used later. After querying, copy and paste them into Notepad for subsequent steps (use the mouse to select the content to be copied, and the selected color disappears after <code>Ctrl</code>+<code>C</code>, but it has actually been copied).</p> </li> <li> <p>App uninstall</p> </li> <li>Uninstall all apps at once. Enter the command <code>Get-AppxPackage * | Remove-AppxPackage</code>, as shown in the figure below, the red in the figure below indicates that some applications cannot be uninstalled, such as Cortana, Edge, etc.</li> <li> <p>Uninstall a single app. Enter the command <code>Get-AppxPackage *application name* | Remove-AppxPackage</code>, as shown below. The red in the picture below is when the Xbox is uninstalled. Although this error occurs, the Xbox has basically been uninstalled. The name of the application is the last word of the \"name\" of the searched application. For example, in the first application in the first picture, \"name\" is \"Microsoft.MicrosoftEdge\", then the name of the application is \"MicrosoftEdge\" when uninstalling (this is an example , actually Edge cannot be uninstalled).</p> </li> <li> <p>Recover deleted apps</p> </li> <li>Restore all applications at once Enter the command: <code>Get-AppxPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register \"$($_.InstallLocation)\\AppXManifest.xml\"}</code> to restore all apps.</li> <li>Recover some apps individually Enter the command: <code>Add-appxpackage -register \"C:\\Program Files\\WindowsApps\\Microsoft.BingWeather_4.9.51.0_x86__8wekyb3d8bbwe\\appxmanifest.xml\" -disabledevelopmentmode</code> The above command is to install the weather application, which can be divided into three parts: <code>Add-appxpackage -register \"application installation location\\appxmanifest.xml\" -disabledevelopmentmode</code> For all applications, the first and third parts are fixed Yes, the second part is the installation location of the application, which is determined according to the \"InstallLocation\" of the application found in the first step. The red mark in the figure below is equivalent to the above C:\\Program Files\\WindowsApps\\Microsoft.BingWeather_4.9.51.0_x86__8wekyb3d8bbwe, so if you install a picture application, replace this part of the content with the red line in the picture.</li> </ol> <p>Check the <code>SoftwareDistribution</code> folder. First open: C:\\Windows, check the SoftwareDistribution folder. Verify the size of this folder to see if the Windows 11 update files are downloading.</p> <p>There is also the obvious possibility that the update may hang longer, even if the file is not installed, in which case the SoftwareDistribution folder needs to be cleared. Specific steps are as follows:</p> <ol> <li> <p>Press the win+r shortcut key to open the run menu, type cmd, and run as administrator to open the command prompt window. Type the following command: net stop wuauserv and press Enter.</p> </li> <li> <p>Then enter net stop bits and press Enter.</p> </li> <li> <p>Navigate to <code>C:\\Windows\\SoftwareDisrtibution</code> and delete all folders. Then continue to enter at the command prompt: net start wuauserv and press Enter.</p> </li> <li> <p>Continue to enter net start bits and press Enter. This can solve the problem that Windows 11 is stuck when downloading and updating to 100%, and you can try to update the system again.</p> </li> </ol>"},{"location":"Windows/Windows%2011/","title":"Windows 11 Tips","text":""},{"location":"Windows/Windows%2011/#restore-the-classic-right-click-menu","title":"Restore the classic right-click menu","text":"<p>run in Windows Terminal ( Admin ): Text Only<pre><code>reg.exe add \"HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\" /f /ve\n</code></pre></p> <p>To restore the troublesome menu of Win11, and the restored registry is also provided here.</p> <p>Just delete the item of InprocServer32 Text Only<pre><code>reg.exe delete \"HKCU\\Software\\Classes\\CLSID\\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\" /va /f\n</code></pre></p>"},{"location":"Windows/cmd/","title":"Cmd commands under Windows","text":"<p>This article lists the most important cmd commands under Windows.</p> cmd command Description Basics: call calls a batch file from another one cd change directory cls clear screen cmd start command prompt color change console color date show/set date dir list directory content echo text output exit exits the command prompt or a batch file find find files hostname display host name pause pauses the execution of a batch file and shows a message runas start a program as another user shutdown shutdown the computer sort sort the screen output start start an own window to execute a program or command taskkill terminate a process or a application tasklist display applications and related tasks time display/edit the system time timeout wait any time title set title for prompt ver display operating system version w32tm setting time synchronisation/time server/time zone Network: ftp transfer files to a FTP server ftype display file type and mapping getmac display MAC address ipconfig display IP network settings netsh configure/control/display network components netstat display TCP/IP connections and status nslookup query the DNS pathping test the connection to a specific IP address ping pings the network route display network routing table, add static routes systeminfo displays computer-specific properties and configurations telnet establish Telnet connection tftp transfer files to a TFTP server tracert trace routes similar to patchping Files: attrib display file attributes comp compare file contents compact display/change file compression copy / xcopy copy files diskcomp compare content of two floppy disks diskcopy copy floppy disc to another one erase / del delete one or more files expand extract files fc copare files and display the differences mkdir create a new directory move move/rename files rename rename files replace replace files rmdir / rd delete directory tree display folder structure graphically type display content of text files Media: chkdsk check volumes chkntfs display/change volume check at startup defrag defragment media diskpart volume management driverquery display installed devices and their properties format format volumes label change volume name mode configure interfaces/devices mountvol assign/delete drive mountpoints verify monitoring whether volumes are written correctly vol show volume description and serial numbers of the HDDs Miscellaneous: for for loop gpresult display group policies gpupdate update group policies perfmon start performance monitor prompt change command prompt reg add/read/import/export registry entries"},{"location":"Windows/conda/","title":"Python with conda","text":""},{"location":"Windows/conda/#change-source","title":"Change Source","text":"<p>This is the most important step after the installation is completed, or because the conda warehouses are all abroad, so the access speed is very slow. We need to replace the address of the warehouse with a domestic mirror source in order to use it normally. (download at normal speed instead of tortoise speed)</p>"},{"location":"Windows/conda/#quick-start-for-win-users","title":"Quick Start for Win Users","text":"<ol> <li> <p>Open the start menu, you will find the program of conda's prompt (that is, in the conda folder, the program with prompt in the name, and the icon is a black console)</p> </li> <li> <p>Execute the command: <code>conda config --set show_channel_urls yes</code> (copy and paste the command, press Enter to execute)</p> </li> <li> <p>Go to the C drive and find the Users folder, then find the folder with your user name (for example, my name is Joe, you may be Administrator or something else by yourself), you can see the file named .condarc (Assuming your system is installed on the C drive)</p> </li> <li> <p>Open the .condarc file, delete everything in it, then go to https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/, copy all the content in this box, and paste it into .condarc save and exit</p> </li> <li> <p>Go back to the dark console window of the prompt just now (you won't close it, just reopen it after closing it), then execute <code>conda clean -i</code> and it will be ok</p> </li> </ol> <p>Then it is normal use. By default, conda will be the <code>base</code> environment. Of course, you can install any package you need here. If you want to create multiple isolated virtual environments, you also need to master the creation and switching of conda environments.</p>"},{"location":"Windows/conda/#create-an-environment","title":"Create an environment","text":"<p>Generally, we create by name, execute conda <code>create -n python</code> with the name you want to create. The places where this command can be changed are the blue and red parts. The conda commands all start with conda, then create means to create an environment, then <code>-n</code> means to give the environment a name, just follow the name with a space, and then The python in the red part is the name of the module to be installed. Only one python is installed here. You can also specify the version, such as <code>python=3.8</code>.</p> <p>If you want to install anything else, you can continue to follow Example:</p> <p><code>conda create -n tf python=3.8 tensorflow=2.2</code></p> <p>In this way, you get a conda environment named tf containing two packages python and tensorflow.</p>"},{"location":"Windows/conda/#view-environment","title":"View environment","text":"<p>You can execute <code>conda info -e</code> to view all environments.</p>"},{"location":"Windows/conda/#activate-toggle-environments","title":"Activate (toggle) environments","text":"<p>After it is created, we can execute the command to activate the specified environment by name. For example, I can execute: <code>conda activate BTSer</code> to switch to my environment</p> <p>If you just followed along, you can switch to your tensorflow environment with <code>conda activate tf</code></p>"},{"location":"Windows/conda/#install-the-module-in-the-environment","title":"Install the module in the environment","text":"<p>Before installing, make sure that you are currently in the environment you want. If you don't switch it first, you will not need to install in the wrong environment. After confirmation, execute conda install module name to install. (such as <code>conda install scipy</code>)</p>"},{"location":"Windows/conda/#delete-environment","title":"Delete environment","text":"<p>If you don't want an environment anymore, you can remove this environment by <code>conda remove -n environment name --all</code></p>"},{"location":"Windows/delete_file/","title":"Delete file","text":""},{"location":"Windows/delete_file/#delete-a-file-with-bat-file","title":"Delete a file with <code>.bat</code> file","text":"<p>Create new <code>doument.txt</code>, write in: Text Only<pre><code>DEL /F /A /Q \\\\?\\%1\n\nRD /S /Q \\\\?\\%1\n</code></pre> Save as <code>.bat</code> file. Move the file to the .bat file and be deleted</p>"},{"location":"Windows/docker/","title":"docker container","text":""},{"location":"Windows/docker/#wsl-2-gpu-support-for-docker-desktop-on-nvidia-gpus","title":"WSL 2 GPU Support for Docker Desktop on NVIDIA GPUs","text":"<p>It\u2019s been a year since Ben wrote about Nvidia support on Docker Desktop. At that time, it was necessary to take part in the Windows Insider program, use Beta CUDA drivers, and use a Docker Desktop tech preview build. Today, everything has changed:</p> <ul> <li>On the OS side, Windows 11 users can now enable their GPU without participating in the Windows Insider program. Windows 10 users still need to register.</li> <li>Nvidia CUDA drivers have been released.</li> <li>Last, the GPU support has been merged in Docker Desktop (in fact since version 3.1).</li> </ul> <p>Nvidia used the term near-native to describe the performance to be expected.</p>"},{"location":"Windows/docker/#where-to-find-the-docker-images","title":"Where to find the Docker images","text":"<p>Base Docker images are hosted at https://hub.docker.com/r/nvidia/cuda. The original project is located at https://gitlab.com/nvidia/container-images/cuda.</p>"},{"location":"Windows/docker/#what-they-contain","title":"What they contain","text":"<p>The <code>nvidia-smi</code>utility allows users to query information on the accessible devices.</p> Text Only<pre><code>$ docker run -it --gpus=all --rm nvidia/cuda:11.4.2-base-ubuntu20.04 nvidia-smi\nTue Dec  7 13:25:19 2021\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 510.00       Driver Version: 510.06       CUDA Version: 11.6     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  NVIDIA GeForce ...  On   | 00000000:01:00.0 Off |                  N/A |\n| N/A    0C    P0    13W /  N/A |    132MiB /  4096MiB |     N/A      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------\n</code></pre> <p>The <code>dmon</code> function of nvidia-smi allows monitoring the GPU parameters :</p> Text Only<pre><code>$ docker exec -ti $(docker ps -ql) bash\nroot@7d3f4cbdeabb:/src# nvidia-smi dmon\n# gpu   pwr gtemp mtemp    sm   mem   enc   dec  mclk  pclk\n# Idx     W     C     C     %     %     %     %   MHz   MHz\n    0    29    69     -     -     -     0     0  4996  1845\n    0    30    69     -     -     -     0     0  4995  1844\n</code></pre> <p>The nbody utility is a CUDA sample that provides a benchmarking mode.</p> Text Only<pre><code>$ docker run -it --gpus=all --rm nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -benchmark\n...\n&gt; 1 Devices used for simulation\nGPU Device 0: \"Turing\" with compute capability 7.5\n\n&gt; Compute 7.5 CUDA device: [NVIDIA GeForce GTX 1650 Ti]\n16384 bodies, total time for 10 iterations: 25.958 ms\n= 103.410 billion interactions per second\n= 2068.205 single-precision GFLOP/s at 20 flops per interaction\n</code></pre> <p>Quick comparison to a CPU suggest a different order of magnitude of performance. GPU is 2000 times faster:</p> Text Only<pre><code>&gt; Simulation with CPU\n4096 bodies, total time for 10 iterations: 3221.642 ms\n= 0.052 billion interactions per second\n= 1.042 single-precision GFLOP/s at 20 flops per interaction\n</code></pre>"},{"location":"Windows/docker/#what-can-you-do-with-a-paravirtualized-gpu","title":"What can you do with a paravirtualized GPU?","text":""},{"location":"Windows/docker/#run-cryptographic-tools","title":"Run cryptographic tools","text":"<p>Using a GPU is of course useful when operations can be heavily parallelized. That\u2019s the case for hash analysis. <code>dizcza</code> hosted its nvidia-docker based images of hashcat on Docker hub. This image magically works on Docker Desktop!</p> Text Only<pre><code>$ docker run -it --gpus=all --rm dizcza/docker-hashcat //bin/bash\nroot@a6752716788d:~# hashcat -I\nhashcat (v6.2.3) starting in backend information mode\n\nclGetPlatformIDs(): CL_PLATFORM_NOT_FOUND_KHR\n\nCUDA Info:\n==========\n\nCUDA.Version.: 11.6\n\nBackend Device ID #1\n  Name...........: NVIDIA GeForce GTX 1650 Ti\n  Processor(s)...: 16\n  Clock..........: 1485\n  Memory.Total...: 4095 MB\n  Memory.Free....: 3325 MB\n  PCI.Addr.BDFe..: 0000:01:00.0\n</code></pre> <p>From there it is possible to run hashcat benchmark</p> Text Only<pre><code>hashcat -b\n...\nHashmode: 0 - MD5\nSpeed.#1.........: 11800.8 MH/s (90.34ms) @ Accel:64 Loops:1024 Thr:1024 Vec:1\nHashmode: 100 - SHA1\nSpeed.#1.........:  4021.7 MH/s (66.13ms) @ Accel:32 Loops:512 Thr:1024 Vec:1\nHashmode: 1400 - SHA2-256\nSpeed.#1.........:  1710.1 MH/s (77.89ms) @ Accel:8 Loops:1024 Thr:1024 Vec:1\n...\n</code></pre>"},{"location":"Windows/docker/#draw-fractals","title":"Draw fractals","text":"<p>The project at https://github.com/jameswmccarty/CUDA-Fractal-Flames uses CUDA for generating fractals. There are two steps to build and run on Linux. Let\u2019s see if we can have it running on Docker Desktop. A simple Dockerfile with nothing fancy helps for that.</p> Text Only<pre><code># syntax = docker/dockerfile:1.3-labs\nFROM nvidia/cuda:11.4.2-base-ubuntu20.04\nRUN apt -y update\nRUN DEBIAN_FRONTEND=noninteractive apt -yq install git nano libtiff-dev cuda-toolkit-11-4\nRUN git clone --depth 1 https://github.com/jameswmccarty/CUDA-Fractal-Flames /src\nWORKDIR /src\nRUN sed 's/4736/1024/' -i fractal_cuda.cu # Make the generated image smaller\nRUN make\n</code></pre> <p>And then we can build and run:</p> Text Only<pre><code>$ docker build . -t cudafractal\n$ docker run --gpus=all -ti --rm -v ${PWD}:/tmp/ cudafractal ./fractal -n 15 -c test.coeff -m -15 -M 15 -l -15 -L 15\n</code></pre> <p>Note that the <code>--gpus=all</code>is only available to the <code>run</code> command. It\u2019s not possible to add GPU intensive steps during the <code>build</code>.</p>"},{"location":"Windows/docker/#machine-learning","title":"Machine learning","text":"<p>Well really, looking at GPU usage without looking at machine learning would be a miss. The <code>tensorflow:latest-gpu</code>image can take advantage of the GPU in Docker Desktop. I will simply point you to Anca\u2019s blog earlier this year. She described a tensorflow example and deployed it in the cloud: https://www.docker.com/blog/deploy-gpu-accelerated-applications-on-amazon-ecs-with-docker-compose/</p>"},{"location":"Windows/docker/#conclusion-what-are-the-benefits-for-developers","title":"Conclusion: What are the benefits for developers?","text":"<p>At Docker, we want to provide a turn key solution for developers to execute their workflows seamlessly:</p> <ul> <li>With Docker Desktop, developers can run their code locally and deploy to the infrastructure of their choice.</li> <li>We provide support in the issue tracker https://github.com/docker/for-win</li> <li>See what\u2019s coming up and recommend feature requests in the Docker public roadmap https://github.com/docker/roadmap</li> <li>Download the latest version of Docker Desktop now.</li> </ul>"},{"location":"Windows/proxy/","title":"Proxy","text":""},{"location":"Windows/proxy/#how-to-use-the-web-proxy-on-the-terminal","title":"How to use the web proxy on the terminal","text":""},{"location":"Windows/proxy/#preface","title":"Preface","text":"<p>When we use <code>Homebrew</code>, <code>git</code>, <code>npm</code> and other commands in the terminal, the installation always fails because of network problems.</p> <p>Especially when installing <code>Homebrew</code>, I understand that many of you have spent a long time trying to solve it, and I don't know how many times you've complained about the damn network.</p> <p>Although it is true that setting up a mirror is useful, it is not universal, so today we will introduce a way to let the terminal also take the proxy, which can kill many cases.</p> <p>The proxy mentioned in the text refers to the case with <code>Clash</code>, other software also has some common ground.</p>"},{"location":"Windows/proxy/#macos-linux","title":"macOS &amp; Linux","text":"<p>By setting <code>http_proxy</code>, <code>https_proxy</code>, you can make the terminal go through the specified proxy. The configuration script is as follows and will only take effect temporarily when executed directly in the terminal.</p> Bash<pre><code>export http_proxy=http://127.0.0.1:7890\nexport https_proxy=$http_proxy\n</code></pre> <p><code>7890</code> is the port corresponding to <code>http</code> proxy, please don't copy the job, modify it according to your actual situation.</p> <p>You can find the proxy port information in Clash's settings screen. </p>"},{"location":"Windows/proxy/#handy-script","title":"Handy script","text":"<p>Here is a handy script that contains functions to turn on and off.</p> Bash<pre><code>function proxy_on() {\nexport http_proxy=http://127.0.0.1:7890\n    export https_proxy=\\$http_proxy\n    echo -e \"Terminal proxy is turned on.\"\n}\n\nfunction proxy_off(){\nunset http_proxy https_proxy\n    echo -e \"Terminal proxy is off.\"\n}\n</code></pre> <p>Start the proxy with <code>proxy_on</code> and turn it off with <code>proxy_off</code>.</p> <p>Next you need to write the script to <code>.bash_profile</code> or <code>.zprofile</code> so that it will be permanent.</p> <p>You may ask, how to write the script, be patient, the method to install the script is provided below.</p> <p>As for which file you should write, please judge by the result of the command <code>echo $SHELL</code> which returns.</p> <ul> <li><code>/bin/bash</code> =&gt; <code>.bash_profile</code></li> <li><code>/bin/zsh</code> =&gt; <code>.zprofile</code></li> </ul> <p>Then execute the installation script (append + take effect), note that the name of <code>.bash_profile</code> must be changed according to the above result: <code>`/bin/bash</code> =&gt; <code>/bin/zsh</code> =&gt; <code>.zprofile</code></p> Bash<pre><code>cat &gt; ~/.bash_profile &lt;&lt; EOF\nfunction proxy_on() {\n    export http_proxy=http://127.0.0.1:7890\n    export https_proxy=\\$http_proxy\n    echo -e \"Terminal proxy is enabled.\"\n}\n\nfunction proxy_off(){\n    unset http_proxy https_proxy\n    echo -e \"Terminal proxy is off.\"\n}\nEOF\n\nsource ~/.bash_profile\n</code></pre> <p>Open the proxy</p> Text Only<pre><code>proxy_on\n</code></pre> <p>Turn off the proxy</p> Text Only<pre><code>proxy_off\n</code></pre> <p>You can execute <code>curl cip.cc</code> to verify: (clash on global)</p> Text Only<pre><code>IP : xxx\nAddress : Taipei City, Taiwan, China\nCarrier : cht.com.tw\n\nData 2 : Taiwan Province | Chunghwa Telecom (HiNet) Data Center\n\nData 3 : Taiwan, China | Chunghwa Telecom\n\nURL : http://www.cip.cc/xxx\n````\n\n\nI've seen online that `curl -I http://www.google.com` may encounter `403` problem, you need to pay attention to this situation when using `Google` domain verification.\n\n### Windows\n\nAccording to the article on the web, using the global proxy method under `Windows` will also work for `cmd` (without validation).\n\n#### cmd\n\n```shell\nset http_proxy=http://127.0.0.1:7890\nset https_proxy=http://127.0.0.1:7890\n</code></pre> <p>Restore command.</p> Bash<pre><code>set http_proxy=\nset https_proxy=\n</code></pre>"},{"location":"Windows/proxy/#git-bash","title":"Git Bash","text":"<p>Set up the same as \"macOS &amp; Linux\"</p>"},{"location":"Windows/proxy/#powershell","title":"PowerShell","text":"Bash<pre><code>$env:http_proxy=\"http://127.0.0.1:7890\"\n$env:https_proxy=\"http://127.0.0.1:7890\"\n</code></pre> <p>Restore command (not verified).</p> Bash<pre><code>$env:http_proxy=\"\"\n$env:https_proxy=\"\"\n</code></pre>"},{"location":"Windows/proxy/#other-proxy-settings","title":"Other proxy settings","text":""},{"location":"Windows/proxy/#git-proxy","title":"git proxy","text":"Bash<pre><code>## Settings\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n\n# Restore\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n</code></pre>"},{"location":"Windows/proxy/#github-proxy","title":"Github Proxy","text":"<p>GitHub documentation , Releases , archive , gist , raw.githubusercontent.com file proxy accelerated download service.</p> Bash<pre><code>git clone https://ghproxy.com/https://github.com/stilleshan/ServerStatus\n</code></pre>"},{"location":"Windows/proxy/#npm","title":"npm","text":"Text Only<pre><code>### npm set\n\nnpm config set proxy http://server:port\nnpm config set https-proxy http://server:port\n\n### npm config set proxy\nnpm config delete proxy\nnpm config delete https-proxy\n</code></pre>"},{"location":"Windows/proxy/#git-clone-ssh-how-to-go-proxy","title":"git clone ssh how to go proxy","text":""},{"location":"Windows/proxy/#macos","title":"macOS","text":"<p>Open <code>~/.ssh/config</code>, if you don't have this file, create it yourself manually.</p> Text Only<pre><code># global\n# ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p\n# Set for specific domains only\nHost github.com\n    ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p\n</code></pre>"},{"location":"Windows/proxy/#windows","title":"Windows","text":"<p>Open the <code>C:\\Users\\UserName\\.ssh\\config</code> file and create it manually if you don't see it.</p> Text Only<pre><code># Global\n# ProxyCommand connect -S 127.0.0.1:1080 %h %p\n# Set for specific domains only\nHost github.com\n    ProxyCommand connect -S 127.0.0.1:6600 %h %p\n</code></pre>"},{"location":"Windows/proxy/#do-i-have-to-set-a-separate-proxy-for-git-if-i-use-a-proxy-on-the-terminal","title":"Do I have to set a separate proxy for git if I use a proxy on the terminal?","text":"<p>There are two protocols for git, one is https and the other is ssh.</p> <p>If you are using https, you can set up a proxy for the terminal. If you are using ssh, you need to configure a separate proxy.</p>"},{"location":"Windows/winget/","title":"Windows Package Manager","text":"<p>The winget command line utility enables installing applications and other packages from the command line.</p>"},{"location":"Windows/winget/#winget-command","title":"winget command","text":"<p>usage: winget [] [] <p>The following commands are available: * <code>install</code>   - Installs the given package * <code>show</code>      - Shows information about a package * <code>source</code>    - Manage sources of packages * <code>search</code>    - Find and show basic info of packages * <code>list</code>      - Display installed packages * <code>upgrade</code>   -  Upgrades the given package * <code>uninstall</code> - Uninstalls the given package * <code>hash</code>      - Helper to hash installer files * <code>validate</code>  - Validates a manifest file * <code>settings</code>  - Open settings or set administrator settings * <code>features</code>  - Shows the status of experimental features * <code>export</code>    - Exports a list of the installed packages * <code>import</code>    - Installs all the packages in a file</p> <p>For more details on a specific command, pass it the help argument. [-?]</p> <p>The following options are available:   -v,--version  Display the version of the tool   --info        Display general info of the tool</p> <p>More help can be found at: https://aka.ms/winget-command-help</p>"}]}